# Generated from grammars/Python3.g4 by ANTLR 4.7.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3`")
        buf.write("\u0422\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\3\2")
        buf.write("\3\2\3\2\3\2\3\2\5\2\u00b0\n\2\3\3\3\3\7\3\u00b4\n\3\f")
        buf.write("\3\16\3\u00b7\13\3\3\3\3\3\3\4\3\4\7\4\u00bd\n\4\f\4\16")
        buf.write("\4\u00c0\13\4\3\4\3\4\3\5\3\5\3\5\3\5\5\5\u00c8\n\5\3")
        buf.write("\5\5\5\u00cb\n\5\3\5\3\5\3\6\6\6\u00d0\n\6\r\6\16\6\u00d1")
        buf.write("\3\7\3\7\3\7\5\7\u00d7\n\7\3\b\3\b\3\b\3\b\3\b\5\b\u00de")
        buf.write("\n\b\3\b\3\b\3\b\3\t\3\t\5\t\u00e5\n\t\3\t\3\t\3\n\3\n")
        buf.write("\3\n\5\n\u00ec\n\n\3\n\3\n\3\n\3\n\5\n\u00f2\n\n\7\n\u00f4")
        buf.write("\n\n\f\n\16\n\u00f7\13\n\3\n\3\n\3\n\5\n\u00fc\n\n\3\n")
        buf.write("\3\n\3\n\3\n\5\n\u0102\n\n\7\n\u0104\n\n\f\n\16\n\u0107")
        buf.write("\13\n\3\n\3\n\3\n\5\n\u010c\n\n\3\n\3\n\5\n\u0110\n\n")
        buf.write("\5\n\u0112\n\n\3\n\3\n\5\n\u0116\n\n\3\n\3\n\3\n\3\n\5")
        buf.write("\n\u011c\n\n\7\n\u011e\n\n\f\n\16\n\u0121\13\n\3\n\3\n")
        buf.write("\3\n\5\n\u0126\n\n\3\n\3\n\5\n\u012a\n\n\3\13\3\13\3\13")
        buf.write("\5\13\u012f\n\13\3\f\3\f\3\f\5\f\u0134\n\f\3\f\3\f\3\f")
        buf.write("\3\f\5\f\u013a\n\f\7\f\u013c\n\f\f\f\16\f\u013f\13\f\3")
        buf.write("\f\3\f\3\f\5\f\u0144\n\f\3\f\3\f\3\f\3\f\5\f\u014a\n\f")
        buf.write("\7\f\u014c\n\f\f\f\16\f\u014f\13\f\3\f\3\f\3\f\5\f\u0154")
        buf.write("\n\f\3\f\3\f\5\f\u0158\n\f\5\f\u015a\n\f\3\f\3\f\5\f\u015e")
        buf.write("\n\f\3\f\3\f\3\f\3\f\5\f\u0164\n\f\7\f\u0166\n\f\f\f\16")
        buf.write("\f\u0169\13\f\3\f\3\f\3\f\5\f\u016e\n\f\3\f\3\f\5\f\u0172")
        buf.write("\n\f\3\r\3\r\3\16\3\16\5\16\u0178\n\16\3\17\3\17\3\17")
        buf.write("\7\17\u017d\n\17\f\17\16\17\u0180\13\17\3\17\5\17\u0183")
        buf.write("\n\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\5\20\u018f\n\20\3\21\3\21\3\21\3\21\5\21\u0195\n\21\3")
        buf.write("\21\3\21\3\21\5\21\u019a\n\21\7\21\u019c\n\21\f\21\16")
        buf.write("\21\u019f\13\21\5\21\u01a1\n\21\3\22\3\22\5\22\u01a5\n")
        buf.write("\22\3\22\3\22\3\22\5\22\u01aa\n\22\7\22\u01ac\n\22\f\22")
        buf.write("\16\22\u01af\13\22\3\22\5\22\u01b2\n\22\3\23\3\23\3\24")
        buf.write("\3\24\3\24\3\25\3\25\3\26\3\26\3\26\3\26\3\26\5\26\u01c0")
        buf.write("\n\26\3\27\3\27\3\30\3\30\3\31\3\31\5\31\u01c8\n\31\3")
        buf.write("\32\3\32\3\33\3\33\3\33\3\33\5\33\u01d0\n\33\5\33\u01d2")
        buf.write("\n\33\3\34\3\34\5\34\u01d6\n\34\3\35\3\35\3\35\3\36\3")
        buf.write("\36\7\36\u01dd\n\36\f\36\16\36\u01e0\13\36\3\36\3\36\6")
        buf.write("\36\u01e4\n\36\r\36\16\36\u01e5\5\36\u01e8\n\36\3\36\3")
        buf.write("\36\3\36\3\36\3\36\3\36\3\36\5\36\u01f1\n\36\3\37\3\37")
        buf.write("\3\37\5\37\u01f6\n\37\3 \3 \3 \5 \u01fb\n \3!\3!\3!\7")
        buf.write("!\u0200\n!\f!\16!\u0203\13!\3!\5!\u0206\n!\3\"\3\"\3\"")
        buf.write("\7\"\u020b\n\"\f\"\16\"\u020e\13\"\3#\3#\3#\7#\u0213\n")
        buf.write("#\f#\16#\u0216\13#\3$\3$\3$\3$\7$\u021c\n$\f$\16$\u021f")
        buf.write("\13$\3%\3%\3%\3%\7%\u0225\n%\f%\16%\u0228\13%\3&\3&\3")
        buf.write("&\3&\5&\u022e\n&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u0238")
        buf.write("\n\'\3(\3(\3(\3(\3(\3(\3(\3(\3(\7(\u0243\n(\f(\16(\u0246")
        buf.write("\13(\3(\3(\3(\5(\u024b\n(\3)\3)\3)\3)\3)\3)\3)\5)\u0254")
        buf.write("\n)\3*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u025f\n*\3+\3+\3+\3")
        buf.write("+\3+\3+\3+\6+\u0268\n+\r+\16+\u0269\3+\3+\3+\5+\u026f")
        buf.write("\n+\3+\3+\3+\5+\u0274\n+\3+\3+\3+\5+\u0279\n+\3,\3,\3")
        buf.write(",\3,\7,\u027f\n,\f,\16,\u0282\13,\3,\3,\3,\3-\3-\3-\5")
        buf.write("-\u028a\n-\3.\3.\3.\3.\5.\u0290\n.\5.\u0292\n.\3/\3/\3")
        buf.write("/\3/\6/\u0298\n/\r/\16/\u0299\3/\3/\5/\u029e\n/\3\60\3")
        buf.write("\60\3\60\3\60\3\60\3\60\5\60\u02a6\n\60\3\60\5\60\u02a9")
        buf.write("\n\60\3\61\3\61\5\61\u02ad\n\61\3\62\3\62\5\62\u02b1\n")
        buf.write("\62\3\62\3\62\3\62\3\63\3\63\5\63\u02b8\n\63\3\63\3\63")
        buf.write("\3\63\3\64\3\64\3\64\7\64\u02c0\n\64\f\64\16\64\u02c3")
        buf.write("\13\64\3\65\3\65\3\65\7\65\u02c8\n\65\f\65\16\65\u02cb")
        buf.write("\13\65\3\66\3\66\3\66\5\66\u02d0\n\66\3\67\3\67\3\67\3")
        buf.write("\67\7\67\u02d6\n\67\f\67\16\67\u02d9\13\67\38\38\38\3")
        buf.write("8\38\38\38\38\38\38\38\38\38\58\u02e8\n8\39\59\u02eb\n")
        buf.write("9\39\39\3:\3:\3:\7:\u02f2\n:\f:\16:\u02f5\13:\3;\3;\3")
        buf.write(";\7;\u02fa\n;\f;\16;\u02fd\13;\3<\3<\3<\7<\u0302\n<\f")
        buf.write("<\16<\u0305\13<\3=\3=\3=\3=\3=\7=\u030c\n=\f=\16=\u030f")
        buf.write("\13=\3>\3>\3>\3>\3>\7>\u0316\n>\f>\16>\u0319\13>\3?\3")
        buf.write("?\3?\3?\3?\3?\3?\3?\3?\3?\3?\7?\u0326\n?\f?\16?\u0329")
        buf.write("\13?\3@\3@\3@\3@\3@\3@\3@\5@\u0332\n@\3A\3A\7A\u0336\n")
        buf.write("A\fA\16A\u0339\13A\3A\3A\5A\u033d\nA\3B\3B\3B\5B\u0342")
        buf.write("\nB\3B\3B\3B\5B\u0347\nB\3B\3B\3B\5B\u034c\nB\3B\3B\3")
        buf.write("B\3B\6B\u0352\nB\rB\16B\u0353\3B\3B\3B\3B\5B\u035a\nB")
        buf.write("\3C\3C\3C\3C\7C\u0360\nC\fC\16C\u0363\13C\3C\5C\u0366")
        buf.write("\nC\5C\u0368\nC\3D\3D\5D\u036c\nD\3D\3D\3D\3D\3D\3D\3")
        buf.write("D\5D\u0375\nD\3E\3E\3E\7E\u037a\nE\fE\16E\u037d\13E\3")
        buf.write("E\5E\u0380\nE\3F\3F\5F\u0384\nF\3F\3F\5F\u0388\nF\3F\5")
        buf.write("F\u038b\nF\5F\u038d\nF\3G\3G\5G\u0391\nG\3H\3H\3H\7H\u0396")
        buf.write("\nH\fH\16H\u0399\13H\3H\5H\u039c\nH\3I\3I\3I\7I\u03a1")
        buf.write("\nI\fI\16I\u03a4\13I\3I\5I\u03a7\nI\3J\3J\3J\3J\3J\3J")
        buf.write("\3J\3J\3J\7J\u03b2\nJ\fJ\16J\u03b5\13J\3J\5J\u03b8\nJ")
        buf.write("\5J\u03ba\nJ\3J\3J\3J\3J\7J\u03c0\nJ\fJ\16J\u03c3\13J")
        buf.write("\3J\5J\u03c6\nJ\5J\u03c8\nJ\5J\u03ca\nJ\3K\3K\3K\3K\5")
        buf.write("K\u03d0\nK\3K\5K\u03d3\nK\3K\3K\3K\3L\3L\3L\7L\u03db\n")
        buf.write("L\fL\16L\u03de\13L\3L\3L\5L\u03e2\nL\3L\3L\3L\3L\7L\u03e8")
        buf.write("\nL\fL\16L\u03eb\13L\3L\3L\3L\5L\u03f0\nL\3L\3L\5L\u03f4")
        buf.write("\nL\3M\3M\5M\u03f8\nM\3M\3M\3M\3M\5M\u03fe\nM\3N\3N\5")
        buf.write("N\u0402\nN\3O\3O\3O\3O\3O\5O\u0409\nO\3P\3P\3P\5P\u040e")
        buf.write("\nP\3Q\3Q\5Q\u0412\nQ\3R\3R\3R\5R\u0417\nR\3S\3S\3T\3")
        buf.write("T\3T\5T\u041e\nT\3U\3U\3U\2\2V\2\4\6\b\n\f\16\20\22\24")
        buf.write("\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVX")
        buf.write("Z\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a")
        buf.write("\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c")
        buf.write("\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\2\6\3\2P\\\3\2./")
        buf.write("\3\2&\'\3\2(+\2\u0492\2\u00af\3\2\2\2\4\u00b5\3\2\2\2")
        buf.write("\6\u00ba\3\2\2\2\b\u00c3\3\2\2\2\n\u00cf\3\2\2\2\f\u00d3")
        buf.write("\3\2\2\2\16\u00d8\3\2\2\2\20\u00e2\3\2\2\2\22\u0129\3")
        buf.write("\2\2\2\24\u012b\3\2\2\2\26\u0171\3\2\2\2\30\u0173\3\2")
        buf.write("\2\2\32\u0177\3\2\2\2\34\u0179\3\2\2\2\36\u018e\3\2\2")
        buf.write("\2 \u0190\3\2\2\2\"\u01a4\3\2\2\2$\u01b3\3\2\2\2&\u01b5")
        buf.write("\3\2\2\2(\u01b8\3\2\2\2*\u01bf\3\2\2\2,\u01c1\3\2\2\2")
        buf.write(".\u01c3\3\2\2\2\60\u01c5\3\2\2\2\62\u01c9\3\2\2\2\64\u01cb")
        buf.write("\3\2\2\2\66\u01d5\3\2\2\28\u01d7\3\2\2\2:\u01da\3\2\2")
        buf.write("\2<\u01f2\3\2\2\2>\u01f7\3\2\2\2@\u01fc\3\2\2\2B\u0207")
        buf.write("\3\2\2\2D\u020f\3\2\2\2F\u0217\3\2\2\2H\u0220\3\2\2\2")
        buf.write("J\u0229\3\2\2\2L\u0237\3\2\2\2N\u0239\3\2\2\2P\u024c\3")
        buf.write("\2\2\2R\u0255\3\2\2\2T\u0260\3\2\2\2V\u027a\3\2\2\2X\u0286")
        buf.write("\3\2\2\2Z\u028b\3\2\2\2\\\u029d\3\2\2\2^\u02a8\3\2\2\2")
        buf.write("`\u02ac\3\2\2\2b\u02ae\3\2\2\2d\u02b5\3\2\2\2f\u02bc\3")
        buf.write("\2\2\2h\u02c4\3\2\2\2j\u02cf\3\2\2\2l\u02d1\3\2\2\2n\u02e7")
        buf.write("\3\2\2\2p\u02ea\3\2\2\2r\u02ee\3\2\2\2t\u02f6\3\2\2\2")
        buf.write("v\u02fe\3\2\2\2x\u0306\3\2\2\2z\u0310\3\2\2\2|\u031a\3")
        buf.write("\2\2\2~\u0331\3\2\2\2\u0080\u0333\3\2\2\2\u0082\u0359")
        buf.write("\3\2\2\2\u0084\u035b\3\2\2\2\u0086\u0374\3\2\2\2\u0088")
        buf.write("\u0376\3\2\2\2\u008a\u038c\3\2\2\2\u008c\u038e\3\2\2\2")
        buf.write("\u008e\u0392\3\2\2\2\u0090\u039d\3\2\2\2\u0092\u03c9\3")
        buf.write("\2\2\2\u0094\u03cb\3\2\2\2\u0096\u03dc\3\2\2\2\u0098\u03fd")
        buf.write("\3\2\2\2\u009a\u0401\3\2\2\2\u009c\u0403\3\2\2\2\u009e")
        buf.write("\u040a\3\2\2\2\u00a0\u040f\3\2\2\2\u00a2\u0416\3\2\2\2")
        buf.write("\u00a4\u0418\3\2\2\2\u00a6\u041d\3\2\2\2\u00a8\u041f\3")
        buf.write("\2\2\2\u00aa\u00b0\7$\2\2\u00ab\u00b0\5\34\17\2\u00ac")
        buf.write("\u00ad\5L\'\2\u00ad\u00ae\7$\2\2\u00ae\u00b0\3\2\2\2\u00af")
        buf.write("\u00aa\3\2\2\2\u00af\u00ab\3\2\2\2\u00af\u00ac\3\2\2\2")
        buf.write("\u00b0\3\3\2\2\2\u00b1\u00b4\7$\2\2\u00b2\u00b4\5\32\16")
        buf.write("\2\u00b3\u00b1\3\2\2\2\u00b3\u00b2\3\2\2\2\u00b4\u00b7")
        buf.write("\3\2\2\2\u00b5\u00b3\3\2\2\2\u00b5\u00b6\3\2\2\2\u00b6")
        buf.write("\u00b8\3\2\2\2\u00b7\u00b5\3\2\2\2\u00b8\u00b9\7\2\2\3")
        buf.write("\u00b9\5\3\2\2\2\u00ba\u00be\5\u0090I\2\u00bb\u00bd\7")
        buf.write("$\2\2\u00bc\u00bb\3\2\2\2\u00bd\u00c0\3\2\2\2\u00be\u00bc")
        buf.write("\3\2\2\2\u00be\u00bf\3\2\2\2\u00bf\u00c1\3\2\2\2\u00c0")
        buf.write("\u00be\3\2\2\2\u00c1\u00c2\7\2\2\3\u00c2\7\3\2\2\2\u00c3")
        buf.write("\u00c4\7N\2\2\u00c4\u00ca\5D#\2\u00c5\u00c7\7\61\2\2\u00c6")
        buf.write("\u00c8\5\u0096L\2\u00c7\u00c6\3\2\2\2\u00c7\u00c8\3\2")
        buf.write("\2\2\u00c8\u00c9\3\2\2\2\u00c9\u00cb\7\62\2\2\u00ca\u00c5")
        buf.write("\3\2\2\2\u00ca\u00cb\3\2\2\2\u00cb\u00cc\3\2\2\2\u00cc")
        buf.write("\u00cd\7$\2\2\u00cd\t\3\2\2\2\u00ce\u00d0\5\b\5\2\u00cf")
        buf.write("\u00ce\3\2\2\2\u00d0\u00d1\3\2\2\2\u00d1\u00cf\3\2\2\2")
        buf.write("\u00d1\u00d2\3\2\2\2\u00d2\13\3\2\2\2\u00d3\u00d6\5\n")
        buf.write("\6\2\u00d4\u00d7\5\u0094K\2\u00d5\u00d7\5\16\b\2\u00d6")
        buf.write("\u00d4\3\2\2\2\u00d6\u00d5\3\2\2\2\u00d7\r\3\2\2\2\u00d8")
        buf.write("\u00d9\7\3\2\2\u00d9\u00da\7%\2\2\u00da\u00dd\5\20\t\2")
        buf.write("\u00db\u00dc\7O\2\2\u00dc\u00de\5^\60\2\u00dd\u00db\3")
        buf.write("\2\2\2\u00dd\u00de\3\2\2\2\u00de\u00df\3\2\2\2\u00df\u00e0")
        buf.write("\7\64\2\2\u00e0\u00e1\5\\/\2\u00e1\17\3\2\2\2\u00e2\u00e4")
        buf.write("\7\61\2\2\u00e3\u00e5\5\22\n\2\u00e4\u00e3\3\2\2\2\u00e4")
        buf.write("\u00e5\3\2\2\2\u00e5\u00e6\3\2\2\2\u00e6\u00e7\7\62\2")
        buf.write("\2\u00e7\21\3\2\2\2\u00e8\u00eb\5\24\13\2\u00e9\u00ea")
        buf.write("\7\67\2\2\u00ea\u00ec\5^\60\2\u00eb\u00e9\3\2\2\2\u00eb")
        buf.write("\u00ec\3\2\2\2\u00ec\u00f5\3\2\2\2\u00ed\u00ee\7\63\2")
        buf.write("\2\u00ee\u00f1\5\24\13\2\u00ef\u00f0\7\67\2\2\u00f0\u00f2")
        buf.write("\5^\60\2\u00f1\u00ef\3\2\2\2\u00f1\u00f2\3\2\2\2\u00f2")
        buf.write("\u00f4\3\2\2\2\u00f3\u00ed\3\2\2\2\u00f4\u00f7\3\2\2\2")
        buf.write("\u00f5\u00f3\3\2\2\2\u00f5\u00f6\3\2\2\2\u00f6\u0111\3")
        buf.write("\2\2\2\u00f7\u00f5\3\2\2\2\u00f8\u010f\7\63\2\2\u00f9")
        buf.write("\u00fb\7\60\2\2\u00fa\u00fc\5\24\13\2\u00fb\u00fa\3\2")
        buf.write("\2\2\u00fb\u00fc\3\2\2\2\u00fc\u0105\3\2\2\2\u00fd\u00fe")
        buf.write("\7\63\2\2\u00fe\u0101\5\24\13\2\u00ff\u0100\7\67\2\2\u0100")
        buf.write("\u0102\5^\60\2\u0101\u00ff\3\2\2\2\u0101\u0102\3\2\2\2")
        buf.write("\u0102\u0104\3\2\2\2\u0103\u00fd\3\2\2\2\u0104\u0107\3")
        buf.write("\2\2\2\u0105\u0103\3\2\2\2\u0105\u0106\3\2\2\2\u0106\u010b")
        buf.write("\3\2\2\2\u0107\u0105\3\2\2\2\u0108\u0109\7\63\2\2\u0109")
        buf.write("\u010a\7\66\2\2\u010a\u010c\5\24\13\2\u010b\u0108\3\2")
        buf.write("\2\2\u010b\u010c\3\2\2\2\u010c\u0110\3\2\2\2\u010d\u010e")
        buf.write("\7\66\2\2\u010e\u0110\5\24\13\2\u010f\u00f9\3\2\2\2\u010f")
        buf.write("\u010d\3\2\2\2\u010f\u0110\3\2\2\2\u0110\u0112\3\2\2\2")
        buf.write("\u0111\u00f8\3\2\2\2\u0111\u0112\3\2\2\2\u0112\u012a\3")
        buf.write("\2\2\2\u0113\u0115\7\60\2\2\u0114\u0116\5\24\13\2\u0115")
        buf.write("\u0114\3\2\2\2\u0115\u0116\3\2\2\2\u0116\u011f\3\2\2\2")
        buf.write("\u0117\u0118\7\63\2\2\u0118\u011b\5\24\13\2\u0119\u011a")
        buf.write("\7\67\2\2\u011a\u011c\5^\60\2\u011b\u0119\3\2\2\2\u011b")
        buf.write("\u011c\3\2\2\2\u011c\u011e\3\2\2\2\u011d\u0117\3\2\2\2")
        buf.write("\u011e\u0121\3\2\2\2\u011f\u011d\3\2\2\2\u011f\u0120\3")
        buf.write("\2\2\2\u0120\u0125\3\2\2\2\u0121\u011f\3\2\2\2\u0122\u0123")
        buf.write("\7\63\2\2\u0123\u0124\7\66\2\2\u0124\u0126\5\24\13\2\u0125")
        buf.write("\u0122\3\2\2\2\u0125\u0126\3\2\2\2\u0126\u012a\3\2\2\2")
        buf.write("\u0127\u0128\7\66\2\2\u0128\u012a\5\24\13\2\u0129\u00e8")
        buf.write("\3\2\2\2\u0129\u0113\3\2\2\2\u0129\u0127\3\2\2\2\u012a")
        buf.write("\23\3\2\2\2\u012b\u012e\7%\2\2\u012c\u012d\7\64\2\2\u012d")
        buf.write("\u012f\5^\60\2\u012e\u012c\3\2\2\2\u012e\u012f\3\2\2\2")
        buf.write("\u012f\25\3\2\2\2\u0130\u0133\5\30\r\2\u0131\u0132\7\67")
        buf.write("\2\2\u0132\u0134\5^\60\2\u0133\u0131\3\2\2\2\u0133\u0134")
        buf.write("\3\2\2\2\u0134\u013d\3\2\2\2\u0135\u0136\7\63\2\2\u0136")
        buf.write("\u0139\5\30\r\2\u0137\u0138\7\67\2\2\u0138\u013a\5^\60")
        buf.write("\2\u0139\u0137\3\2\2\2\u0139\u013a\3\2\2\2\u013a\u013c")
        buf.write("\3\2\2\2\u013b\u0135\3\2\2\2\u013c\u013f\3\2\2\2\u013d")
        buf.write("\u013b\3\2\2\2\u013d\u013e\3\2\2\2\u013e\u0159\3\2\2\2")
        buf.write("\u013f\u013d\3\2\2\2\u0140\u0157\7\63\2\2\u0141\u0143")
        buf.write("\7\60\2\2\u0142\u0144\5\30\r\2\u0143\u0142\3\2\2\2\u0143")
        buf.write("\u0144\3\2\2\2\u0144\u014d\3\2\2\2\u0145\u0146\7\63\2")
        buf.write("\2\u0146\u0149\5\30\r\2\u0147\u0148\7\67\2\2\u0148\u014a")
        buf.write("\5^\60\2\u0149\u0147\3\2\2\2\u0149\u014a\3\2\2\2\u014a")
        buf.write("\u014c\3\2\2\2\u014b\u0145\3\2\2\2\u014c\u014f\3\2\2\2")
        buf.write("\u014d\u014b\3\2\2\2\u014d\u014e\3\2\2\2\u014e\u0153\3")
        buf.write("\2\2\2\u014f\u014d\3\2\2\2\u0150\u0151\7\63\2\2\u0151")
        buf.write("\u0152\7\66\2\2\u0152\u0154\5\30\r\2\u0153\u0150\3\2\2")
        buf.write("\2\u0153\u0154\3\2\2\2\u0154\u0158\3\2\2\2\u0155\u0156")
        buf.write("\7\66\2\2\u0156\u0158\5\30\r\2\u0157\u0141\3\2\2\2\u0157")
        buf.write("\u0155\3\2\2\2\u0157\u0158\3\2\2\2\u0158\u015a\3\2\2\2")
        buf.write("\u0159\u0140\3\2\2\2\u0159\u015a\3\2\2\2\u015a\u0172\3")
        buf.write("\2\2\2\u015b\u015d\7\60\2\2\u015c\u015e\5\30\r\2\u015d")
        buf.write("\u015c\3\2\2\2\u015d\u015e\3\2\2\2\u015e\u0167\3\2\2\2")
        buf.write("\u015f\u0160\7\63\2\2\u0160\u0163\5\30\r\2\u0161\u0162")
        buf.write("\7\67\2\2\u0162\u0164\5^\60\2\u0163\u0161\3\2\2\2\u0163")
        buf.write("\u0164\3\2\2\2\u0164\u0166\3\2\2\2\u0165\u015f\3\2\2\2")
        buf.write("\u0166\u0169\3\2\2\2\u0167\u0165\3\2\2\2\u0167\u0168\3")
        buf.write("\2\2\2\u0168\u016d\3\2\2\2\u0169\u0167\3\2\2\2\u016a\u016b")
        buf.write("\7\63\2\2\u016b\u016c\7\66\2\2\u016c\u016e\5\30\r\2\u016d")
        buf.write("\u016a\3\2\2\2\u016d\u016e\3\2\2\2\u016e\u0172\3\2\2\2")
        buf.write("\u016f\u0170\7\66\2\2\u0170\u0172\5\30\r\2\u0171\u0130")
        buf.write("\3\2\2\2\u0171\u015b\3\2\2\2\u0171\u016f\3\2\2\2\u0172")
        buf.write("\27\3\2\2\2\u0173\u0174\7%\2\2\u0174\31\3\2\2\2\u0175")
        buf.write("\u0178\5\34\17\2\u0176\u0178\5L\'\2\u0177\u0175\3\2\2")
        buf.write("\2\u0177\u0176\3\2\2\2\u0178\33\3\2\2\2\u0179\u017e\5")
        buf.write("\36\20\2\u017a\u017b\7\65\2\2\u017b\u017d\5\36\20\2\u017c")
        buf.write("\u017a\3\2\2\2\u017d\u0180\3\2\2\2\u017e\u017c\3\2\2\2")
        buf.write("\u017e\u017f\3\2\2\2\u017f\u0182\3\2\2\2\u0180\u017e\3")
        buf.write("\2\2\2\u0181\u0183\7\65\2\2\u0182\u0181\3\2\2\2\u0182")
        buf.write("\u0183\3\2\2\2\u0183\u0184\3\2\2\2\u0184\u0185\7$\2\2")
        buf.write("\u0185\35\3\2\2\2\u0186\u018f\5 \21\2\u0187\u018f\5&\24")
        buf.write("\2\u0188\u018f\5(\25\2\u0189\u018f\5*\26\2\u018a\u018f")
        buf.write("\5\66\34\2\u018b\u018f\5F$\2\u018c\u018f\5H%\2\u018d\u018f")
        buf.write("\5J&\2\u018e\u0186\3\2\2\2\u018e\u0187\3\2\2\2\u018e\u0188")
        buf.write("\3\2\2\2\u018e\u0189\3\2\2\2\u018e\u018a\3\2\2\2\u018e")
        buf.write("\u018b\3\2\2\2\u018e\u018c\3\2\2\2\u018e\u018d\3\2\2\2")
        buf.write("\u018f\37\3\2\2\2\u0190\u01a0\5\"\22\2\u0191\u0194\5$")
        buf.write("\23\2\u0192\u0195\5\u00a0Q\2\u0193\u0195\5\u0090I\2\u0194")
        buf.write("\u0192\3\2\2\2\u0194\u0193\3\2\2\2\u0195\u01a1\3\2\2\2")
        buf.write("\u0196\u0199\7\67\2\2\u0197\u019a\5\u00a0Q\2\u0198\u019a")
        buf.write("\5\"\22\2\u0199\u0197\3\2\2\2\u0199\u0198\3\2\2\2\u019a")
        buf.write("\u019c\3\2\2\2\u019b\u0196\3\2\2\2\u019c\u019f\3\2\2\2")
        buf.write("\u019d\u019b\3\2\2\2\u019d\u019e\3\2\2\2\u019e\u01a1\3")
        buf.write("\2\2\2\u019f\u019d\3\2\2\2\u01a0\u0191\3\2\2\2\u01a0\u019d")
        buf.write("\3\2\2\2\u01a1!\3\2\2\2\u01a2\u01a5\5^\60\2\u01a3\u01a5")
        buf.write("\5p9\2\u01a4\u01a2\3\2\2\2\u01a4\u01a3\3\2\2\2\u01a5\u01ad")
        buf.write("\3\2\2\2\u01a6\u01a9\7\63\2\2\u01a7\u01aa\5^\60\2\u01a8")
        buf.write("\u01aa\5p9\2\u01a9\u01a7\3\2\2\2\u01a9\u01a8\3\2\2\2\u01aa")
        buf.write("\u01ac\3\2\2\2\u01ab\u01a6\3\2\2\2\u01ac\u01af\3\2\2\2")
        buf.write("\u01ad\u01ab\3\2\2\2\u01ad\u01ae\3\2\2\2\u01ae\u01b1\3")
        buf.write("\2\2\2\u01af\u01ad\3\2\2\2\u01b0\u01b2\7\63\2\2\u01b1")
        buf.write("\u01b0\3\2\2\2\u01b1\u01b2\3\2\2\2\u01b2#\3\2\2\2\u01b3")
        buf.write("\u01b4\t\2\2\2\u01b4%\3\2\2\2\u01b5\u01b6\7 \2\2\u01b6")
        buf.write("\u01b7\5\u008eH\2\u01b7\'\3\2\2\2\u01b8\u01b9\7!\2\2\u01b9")
        buf.write(")\3\2\2\2\u01ba\u01c0\5,\27\2\u01bb\u01c0\5.\30\2\u01bc")
        buf.write("\u01c0\5\60\31\2\u01bd\u01c0\5\64\33\2\u01be\u01c0\5\62")
        buf.write("\32\2\u01bf\u01ba\3\2\2\2\u01bf\u01bb\3\2\2\2\u01bf\u01bc")
        buf.write("\3\2\2\2\u01bf\u01bd\3\2\2\2\u01bf\u01be\3\2\2\2\u01c0")
        buf.write("+\3\2\2\2\u01c1\u01c2\7#\2\2\u01c2-\3\2\2\2\u01c3\u01c4")
        buf.write("\7\"\2\2\u01c4/\3\2\2\2\u01c5\u01c7\7\4\2\2\u01c6\u01c8")
        buf.write("\5\u0090I\2\u01c7\u01c6\3\2\2\2\u01c7\u01c8\3\2\2\2\u01c8")
        buf.write("\61\3\2\2\2\u01c9\u01ca\5\u00a0Q\2\u01ca\63\3\2\2\2\u01cb")
        buf.write("\u01d1\7\5\2\2\u01cc\u01cf\5^\60\2\u01cd\u01ce\7\6\2\2")
        buf.write("\u01ce\u01d0\5^\60\2\u01cf\u01cd\3\2\2\2\u01cf\u01d0\3")
        buf.write("\2\2\2\u01d0\u01d2\3\2\2\2\u01d1\u01cc\3\2\2\2\u01d1\u01d2")
        buf.write("\3\2\2\2\u01d2\65\3\2\2\2\u01d3\u01d6\58\35\2\u01d4\u01d6")
        buf.write("\5:\36\2\u01d5\u01d3\3\2\2\2\u01d5\u01d4\3\2\2\2\u01d6")
        buf.write("\67\3\2\2\2\u01d7\u01d8\7\7\2\2\u01d8\u01d9\5B\"\2\u01d9")
        buf.write("9\3\2\2\2\u01da\u01e7\7\6\2\2\u01db\u01dd\t\3\2\2\u01dc")
        buf.write("\u01db\3\2\2\2\u01dd\u01e0\3\2\2\2\u01de\u01dc\3\2\2\2")
        buf.write("\u01de\u01df\3\2\2\2\u01df\u01e1\3\2\2\2\u01e0\u01de\3")
        buf.write("\2\2\2\u01e1\u01e8\5D#\2\u01e2\u01e4\t\3\2\2\u01e3\u01e2")
        buf.write("\3\2\2\2\u01e4\u01e5\3\2\2\2\u01e5\u01e3\3\2\2\2\u01e5")
        buf.write("\u01e6\3\2\2\2\u01e6\u01e8\3\2\2\2\u01e7\u01de\3\2\2\2")
        buf.write("\u01e7\u01e3\3\2\2\2\u01e8\u01e9\3\2\2\2\u01e9\u01f0\7")
        buf.write("\7\2\2\u01ea\u01f1\7\60\2\2\u01eb\u01ec\7\61\2\2\u01ec")
        buf.write("\u01ed\5@!\2\u01ed\u01ee\7\62\2\2\u01ee\u01f1\3\2\2\2")
        buf.write("\u01ef\u01f1\5@!\2\u01f0\u01ea\3\2\2\2\u01f0\u01eb\3\2")
        buf.write("\2\2\u01f0\u01ef\3\2\2\2\u01f1;\3\2\2\2\u01f2\u01f5\7")
        buf.write("%\2\2\u01f3\u01f4\7\b\2\2\u01f4\u01f6\7%\2\2\u01f5\u01f3")
        buf.write("\3\2\2\2\u01f5\u01f6\3\2\2\2\u01f6=\3\2\2\2\u01f7\u01fa")
        buf.write("\5D#\2\u01f8\u01f9\7\b\2\2\u01f9\u01fb\7%\2\2\u01fa\u01f8")
        buf.write("\3\2\2\2\u01fa\u01fb\3\2\2\2\u01fb?\3\2\2\2\u01fc\u0201")
        buf.write("\5<\37\2\u01fd\u01fe\7\63\2\2\u01fe\u0200\5<\37\2\u01ff")
        buf.write("\u01fd\3\2\2\2\u0200\u0203\3\2\2\2\u0201\u01ff\3\2\2\2")
        buf.write("\u0201\u0202\3\2\2\2\u0202\u0205\3\2\2\2\u0203\u0201\3")
        buf.write("\2\2\2\u0204\u0206\7\63\2\2\u0205\u0204\3\2\2\2\u0205")
        buf.write("\u0206\3\2\2\2\u0206A\3\2\2\2\u0207\u020c\5> \2\u0208")
        buf.write("\u0209\7\63\2\2\u0209\u020b\5> \2\u020a\u0208\3\2\2\2")
        buf.write("\u020b\u020e\3\2\2\2\u020c\u020a\3\2\2\2\u020c\u020d\3")
        buf.write("\2\2\2\u020dC\3\2\2\2\u020e\u020c\3\2\2\2\u020f\u0214")
        buf.write("\7%\2\2\u0210\u0211\7.\2\2\u0211\u0213\7%\2\2\u0212\u0210")
        buf.write("\3\2\2\2\u0213\u0216\3\2\2\2\u0214\u0212\3\2\2\2\u0214")
        buf.write("\u0215\3\2\2\2\u0215E\3\2\2\2\u0216\u0214\3\2\2\2\u0217")
        buf.write("\u0218\7\t\2\2\u0218\u021d\7%\2\2\u0219\u021a\7\63\2\2")
        buf.write("\u021a\u021c\7%\2\2\u021b\u0219\3\2\2\2\u021c\u021f\3")
        buf.write("\2\2\2\u021d\u021b\3\2\2\2\u021d\u021e\3\2\2\2\u021eG")
        buf.write("\3\2\2\2\u021f\u021d\3\2\2\2\u0220\u0221\7\n\2\2\u0221")
        buf.write("\u0226\7%\2\2\u0222\u0223\7\63\2\2\u0223\u0225\7%\2\2")
        buf.write("\u0224\u0222\3\2\2\2\u0225\u0228\3\2\2\2\u0226\u0224\3")
        buf.write("\2\2\2\u0226\u0227\3\2\2\2\u0227I\3\2\2\2\u0228\u0226")
        buf.write("\3\2\2\2\u0229\u022a\7\13\2\2\u022a\u022d\5^\60\2\u022b")
        buf.write("\u022c\7\63\2\2\u022c\u022e\5^\60\2\u022d\u022b\3\2\2")
        buf.write("\2\u022d\u022e\3\2\2\2\u022eK\3\2\2\2\u022f\u0238\5N(")
        buf.write("\2\u0230\u0238\5P)\2\u0231\u0238\5R*\2\u0232\u0238\5T")
        buf.write("+\2\u0233\u0238\5V,\2\u0234\u0238\5\16\b\2\u0235\u0238")
        buf.write("\5\u0094K\2\u0236\u0238\5\f\7\2\u0237\u022f\3\2\2\2\u0237")
        buf.write("\u0230\3\2\2\2\u0237\u0231\3\2\2\2\u0237\u0232\3\2\2\2")
        buf.write("\u0237\u0233\3\2\2\2\u0237\u0234\3\2\2\2\u0237\u0235\3")
        buf.write("\2\2\2\u0237\u0236\3\2\2\2\u0238M\3\2\2\2\u0239\u023a")
        buf.write("\7\f\2\2\u023a\u023b\5^\60\2\u023b\u023c\7\64\2\2\u023c")
        buf.write("\u0244\5\\/\2\u023d\u023e\7\r\2\2\u023e\u023f\5^\60\2")
        buf.write("\u023f\u0240\7\64\2\2\u0240\u0241\5\\/\2\u0241\u0243\3")
        buf.write("\2\2\2\u0242\u023d\3\2\2\2\u0243\u0246\3\2\2\2\u0244\u0242")
        buf.write("\3\2\2\2\u0244\u0245\3\2\2\2\u0245\u024a\3\2\2\2\u0246")
        buf.write("\u0244\3\2\2\2\u0247\u0248\7\16\2\2\u0248\u0249\7\64\2")
        buf.write("\2\u0249\u024b\5\\/\2\u024a\u0247\3\2\2\2\u024a\u024b")
        buf.write("\3\2\2\2\u024bO\3\2\2\2\u024c\u024d\7\17\2\2\u024d\u024e")
        buf.write("\5^\60\2\u024e\u024f\7\64\2\2\u024f\u0253\5\\/\2\u0250")
        buf.write("\u0251\7\16\2\2\u0251\u0252\7\64\2\2\u0252\u0254\5\\/")
        buf.write("\2\u0253\u0250\3\2\2\2\u0253\u0254\3\2\2\2\u0254Q\3\2")
        buf.write("\2\2\u0255\u0256\7\20\2\2\u0256\u0257\5\u008eH\2\u0257")
        buf.write("\u0258\7\21\2\2\u0258\u0259\5\u0090I\2\u0259\u025a\7\64")
        buf.write("\2\2\u025a\u025e\5\\/\2\u025b\u025c\7\16\2\2\u025c\u025d")
        buf.write("\7\64\2\2\u025d\u025f\5\\/\2\u025e\u025b\3\2\2\2\u025e")
        buf.write("\u025f\3\2\2\2\u025fS\3\2\2\2\u0260\u0261\7\22\2\2\u0261")
        buf.write("\u0262\7\64\2\2\u0262\u0278\5\\/\2\u0263\u0264\5Z.\2\u0264")
        buf.write("\u0265\7\64\2\2\u0265\u0266\5\\/\2\u0266\u0268\3\2\2\2")
        buf.write("\u0267\u0263\3\2\2\2\u0268\u0269\3\2\2\2\u0269\u0267\3")
        buf.write("\2\2\2\u0269\u026a\3\2\2\2\u026a\u026e\3\2\2\2\u026b\u026c")
        buf.write("\7\16\2\2\u026c\u026d\7\64\2\2\u026d\u026f\5\\/\2\u026e")
        buf.write("\u026b\3\2\2\2\u026e\u026f\3\2\2\2\u026f\u0273\3\2\2\2")
        buf.write("\u0270\u0271\7\23\2\2\u0271\u0272\7\64\2\2\u0272\u0274")
        buf.write("\5\\/\2\u0273\u0270\3\2\2\2\u0273\u0274\3\2\2\2\u0274")
        buf.write("\u0279\3\2\2\2\u0275\u0276\7\23\2\2\u0276\u0277\7\64\2")
        buf.write("\2\u0277\u0279\5\\/\2\u0278\u0267\3\2\2\2\u0278\u0275")
        buf.write("\3\2\2\2\u0279U\3\2\2\2\u027a\u027b\7\24\2\2\u027b\u0280")
        buf.write("\5X-\2\u027c\u027d\7\63\2\2\u027d\u027f\5X-\2\u027e\u027c")
        buf.write("\3\2\2\2\u027f\u0282\3\2\2\2\u0280\u027e\3\2\2\2\u0280")
        buf.write("\u0281\3\2\2\2\u0281\u0283\3\2\2\2\u0282\u0280\3\2\2\2")
        buf.write("\u0283\u0284\7\64\2\2\u0284\u0285\5\\/\2\u0285W\3\2\2")
        buf.write("\2\u0286\u0289\5^\60\2\u0287\u0288\7\b\2\2\u0288\u028a")
        buf.write("\5r:\2\u0289\u0287\3\2\2\2\u0289\u028a\3\2\2\2\u028aY")
        buf.write("\3\2\2\2\u028b\u0291\7\25\2\2\u028c\u028f\5^\60\2\u028d")
        buf.write("\u028e\7\b\2\2\u028e\u0290\7%\2\2\u028f\u028d\3\2\2\2")
        buf.write("\u028f\u0290\3\2\2\2\u0290\u0292\3\2\2\2\u0291\u028c\3")
        buf.write("\2\2\2\u0291\u0292\3\2\2\2\u0292[\3\2\2\2\u0293\u029e")
        buf.write("\5\34\17\2\u0294\u0295\7$\2\2\u0295\u0297\7_\2\2\u0296")
        buf.write("\u0298\5\32\16\2\u0297\u0296\3\2\2\2\u0298\u0299\3\2\2")
        buf.write("\2\u0299\u0297\3\2\2\2\u0299\u029a\3\2\2\2\u029a\u029b")
        buf.write("\3\2\2\2\u029b\u029c\7`\2\2\u029c\u029e\3\2\2\2\u029d")
        buf.write("\u0293\3\2\2\2\u029d\u0294\3\2\2\2\u029e]\3\2\2\2\u029f")
        buf.write("\u02a5\5f\64\2\u02a0\u02a1\7\f\2\2\u02a1\u02a2\5f\64\2")
        buf.write("\u02a2\u02a3\7\16\2\2\u02a3\u02a4\5^\60\2\u02a4\u02a6")
        buf.write("\3\2\2\2\u02a5\u02a0\3\2\2\2\u02a5\u02a6\3\2\2\2\u02a6")
        buf.write("\u02a9\3\2\2\2\u02a7\u02a9\5b\62\2\u02a8\u029f\3\2\2\2")
        buf.write("\u02a8\u02a7\3\2\2\2\u02a9_\3\2\2\2\u02aa\u02ad\5f\64")
        buf.write("\2\u02ab\u02ad\5d\63\2\u02ac\u02aa\3\2\2\2\u02ac\u02ab")
        buf.write("\3\2\2\2\u02ada\3\2\2\2\u02ae\u02b0\7\26\2\2\u02af\u02b1")
        buf.write("\5\26\f\2\u02b0\u02af\3\2\2\2\u02b0\u02b1\3\2\2\2\u02b1")
        buf.write("\u02b2\3\2\2\2\u02b2\u02b3\7\64\2\2\u02b3\u02b4\5^\60")
        buf.write("\2\u02b4c\3\2\2\2\u02b5\u02b7\7\26\2\2\u02b6\u02b8\5\26")
        buf.write("\f\2\u02b7\u02b6\3\2\2\2\u02b7\u02b8\3\2\2\2\u02b8\u02b9")
        buf.write("\3\2\2\2\u02b9\u02ba\7\64\2\2\u02ba\u02bb\5`\61\2\u02bb")
        buf.write("e\3\2\2\2\u02bc\u02c1\5h\65\2\u02bd\u02be\7\27\2\2\u02be")
        buf.write("\u02c0\5h\65\2\u02bf\u02bd\3\2\2\2\u02c0\u02c3\3\2\2\2")
        buf.write("\u02c1\u02bf\3\2\2\2\u02c1\u02c2\3\2\2\2\u02c2g\3\2\2")
        buf.write("\2\u02c3\u02c1\3\2\2\2\u02c4\u02c9\5j\66\2\u02c5\u02c6")
        buf.write("\7\30\2\2\u02c6\u02c8\5j\66\2\u02c7\u02c5\3\2\2\2\u02c8")
        buf.write("\u02cb\3\2\2\2\u02c9\u02c7\3\2\2\2\u02c9\u02ca\3\2\2\2")
        buf.write("\u02cai\3\2\2\2\u02cb\u02c9\3\2\2\2\u02cc\u02cd\7\31\2")
        buf.write("\2\u02cd\u02d0\5j\66\2\u02ce\u02d0\5l\67\2\u02cf\u02cc")
        buf.write("\3\2\2\2\u02cf\u02ce\3\2\2\2\u02d0k\3\2\2\2\u02d1\u02d7")
        buf.write("\5p9\2\u02d2\u02d3\5n8\2\u02d3\u02d4\5p9\2\u02d4\u02d6")
        buf.write("\3\2\2\2\u02d5\u02d2\3\2\2\2\u02d6\u02d9\3\2\2\2\u02d7")
        buf.write("\u02d5\3\2\2\2\u02d7\u02d8\3\2\2\2\u02d8m\3\2\2\2\u02d9")
        buf.write("\u02d7\3\2\2\2\u02da\u02e8\7G\2\2\u02db\u02e8\7H\2\2\u02dc")
        buf.write("\u02e8\7I\2\2\u02dd\u02e8\7J\2\2\u02de\u02e8\7K\2\2\u02df")
        buf.write("\u02e8\7L\2\2\u02e0\u02e8\7M\2\2\u02e1\u02e8\7\21\2\2")
        buf.write("\u02e2\u02e3\7\31\2\2\u02e3\u02e8\7\21\2\2\u02e4\u02e8")
        buf.write("\7\32\2\2\u02e5\u02e6\7\32\2\2\u02e6\u02e8\7\31\2\2\u02e7")
        buf.write("\u02da\3\2\2\2\u02e7\u02db\3\2\2\2\u02e7\u02dc\3\2\2\2")
        buf.write("\u02e7\u02dd\3\2\2\2\u02e7\u02de\3\2\2\2\u02e7\u02df\3")
        buf.write("\2\2\2\u02e7\u02e0\3\2\2\2\u02e7\u02e1\3\2\2\2\u02e7\u02e2")
        buf.write("\3\2\2\2\u02e7\u02e4\3\2\2\2\u02e7\u02e5\3\2\2\2\u02e8")
        buf.write("o\3\2\2\2\u02e9\u02eb\7\60\2\2\u02ea\u02e9\3\2\2\2\u02ea")
        buf.write("\u02eb\3\2\2\2\u02eb\u02ec\3\2\2\2\u02ec\u02ed\5r:\2\u02ed")
        buf.write("q\3\2\2\2\u02ee\u02f3\5t;\2\u02ef\u02f0\7:\2\2\u02f0\u02f2")
        buf.write("\5t;\2\u02f1\u02ef\3\2\2\2\u02f2\u02f5\3\2\2\2\u02f3\u02f1")
        buf.write("\3\2\2\2\u02f3\u02f4\3\2\2\2\u02f4s\3\2\2\2\u02f5\u02f3")
        buf.write("\3\2\2\2\u02f6\u02fb\5v<\2\u02f7\u02f8\7;\2\2\u02f8\u02fa")
        buf.write("\5v<\2\u02f9\u02f7\3\2\2\2\u02fa\u02fd\3\2\2\2\u02fb\u02f9")
        buf.write("\3\2\2\2\u02fb\u02fc\3\2\2\2\u02fcu\3\2\2\2\u02fd\u02fb")
        buf.write("\3\2\2\2\u02fe\u0303\5x=\2\u02ff\u0300\7<\2\2\u0300\u0302")
        buf.write("\5x=\2\u0301\u02ff\3\2\2\2\u0302\u0305\3\2\2\2\u0303\u0301")
        buf.write("\3\2\2\2\u0303\u0304\3\2\2\2\u0304w\3\2\2\2\u0305\u0303")
        buf.write("\3\2\2\2\u0306\u030d\5z>\2\u0307\u0308\7=\2\2\u0308\u030c")
        buf.write("\5z>\2\u0309\u030a\7>\2\2\u030a\u030c\5z>\2\u030b\u0307")
        buf.write("\3\2\2\2\u030b\u0309\3\2\2\2\u030c\u030f\3\2\2\2\u030d")
        buf.write("\u030b\3\2\2\2\u030d\u030e\3\2\2\2\u030ey\3\2\2\2\u030f")
        buf.write("\u030d\3\2\2\2\u0310\u0317\5|?\2\u0311\u0312\7?\2\2\u0312")
        buf.write("\u0316\5|?\2\u0313\u0314\7@\2\2\u0314\u0316\5|?\2\u0315")
        buf.write("\u0311\3\2\2\2\u0315\u0313\3\2\2\2\u0316\u0319\3\2\2\2")
        buf.write("\u0317\u0315\3\2\2\2\u0317\u0318\3\2\2\2\u0318{\3\2\2")
        buf.write("\2\u0319\u0317\3\2\2\2\u031a\u0327\5~@\2\u031b\u031c\7")
        buf.write("\60\2\2\u031c\u0326\5~@\2\u031d\u031e\7A\2\2\u031e\u0326")
        buf.write("\5~@\2\u031f\u0320\7B\2\2\u0320\u0326\5~@\2\u0321\u0322")
        buf.write("\7C\2\2\u0322\u0326\5~@\2\u0323\u0324\7N\2\2\u0324\u0326")
        buf.write("\5~@\2\u0325\u031b\3\2\2\2\u0325\u031d\3\2\2\2\u0325\u031f")
        buf.write("\3\2\2\2\u0325\u0321\3\2\2\2\u0325\u0323\3\2\2\2\u0326")
        buf.write("\u0329\3\2\2\2\u0327\u0325\3\2\2\2\u0327\u0328\3\2\2\2")
        buf.write("\u0328}\3\2\2\2\u0329\u0327\3\2\2\2\u032a\u032b\7?\2\2")
        buf.write("\u032b\u0332\5~@\2\u032c\u032d\7@\2\2\u032d\u0332\5~@")
        buf.write("\2\u032e\u032f\7D\2\2\u032f\u0332\5~@\2\u0330\u0332\5")
        buf.write("\u0080A\2\u0331\u032a\3\2\2\2\u0331\u032c\3\2\2\2\u0331")
        buf.write("\u032e\3\2\2\2\u0331\u0330\3\2\2\2\u0332\177\3\2\2\2\u0333")
        buf.write("\u0337\5\u0082B\2\u0334\u0336\5\u0086D\2\u0335\u0334\3")
        buf.write("\2\2\2\u0336\u0339\3\2\2\2\u0337\u0335\3\2\2\2\u0337\u0338")
        buf.write("\3\2\2\2\u0338\u033c\3\2\2\2\u0339\u0337\3\2\2\2\u033a")
        buf.write("\u033b\7\66\2\2\u033b\u033d\5~@\2\u033c\u033a\3\2\2\2")
        buf.write("\u033c\u033d\3\2\2\2\u033d\u0081\3\2\2\2\u033e\u0341\7")
        buf.write("\61\2\2\u033f\u0342\5\u00a0Q\2\u0340\u0342\5\u0084C\2")
        buf.write("\u0341\u033f\3\2\2\2\u0341\u0340\3\2\2\2\u0341\u0342\3")
        buf.write("\2\2\2\u0342\u0343\3\2\2\2\u0343\u035a\7\62\2\2\u0344")
        buf.write("\u0346\78\2\2\u0345\u0347\5\u0084C\2\u0346\u0345\3\2\2")
        buf.write("\2\u0346\u0347\3\2\2\2\u0347\u0348\3\2\2\2\u0348\u035a")
        buf.write("\79\2\2\u0349\u034b\7E\2\2\u034a\u034c\5\u0092J\2\u034b")
        buf.write("\u034a\3\2\2\2\u034b\u034c\3\2\2\2\u034c\u034d\3\2\2\2")
        buf.write("\u034d\u035a\7F\2\2\u034e\u035a\7%\2\2\u034f\u035a\5\u00a6")
        buf.write("T\2\u0350\u0352\5\u00a4S\2\u0351\u0350\3\2\2\2\u0352\u0353")
        buf.write("\3\2\2\2\u0353\u0351\3\2\2\2\u0353\u0354\3\2\2\2\u0354")
        buf.write("\u035a\3\2\2\2\u0355\u035a\7/\2\2\u0356\u035a\7\33\2\2")
        buf.write("\u0357\u035a\7\34\2\2\u0358\u035a\7\35\2\2\u0359\u033e")
        buf.write("\3\2\2\2\u0359\u0344\3\2\2\2\u0359\u0349\3\2\2\2\u0359")
        buf.write("\u034e\3\2\2\2\u0359\u034f\3\2\2\2\u0359\u0351\3\2\2\2")
        buf.write("\u0359\u0355\3\2\2\2\u0359\u0356\3\2\2\2\u0359\u0357\3")
        buf.write("\2\2\2\u0359\u0358\3\2\2\2\u035a\u0083\3\2\2\2\u035b\u0367")
        buf.write("\5^\60\2\u035c\u0368\5\u009cO\2\u035d\u035e\7\63\2\2\u035e")
        buf.write("\u0360\5^\60\2\u035f\u035d\3\2\2\2\u0360\u0363\3\2\2\2")
        buf.write("\u0361\u035f\3\2\2\2\u0361\u0362\3\2\2\2\u0362\u0365\3")
        buf.write("\2\2\2\u0363\u0361\3\2\2\2\u0364\u0366\7\63\2\2\u0365")
        buf.write("\u0364\3\2\2\2\u0365\u0366\3\2\2\2\u0366\u0368\3\2\2\2")
        buf.write("\u0367\u035c\3\2\2\2\u0367\u0361\3\2\2\2\u0368\u0085\3")
        buf.write("\2\2\2\u0369\u036b\7\61\2\2\u036a\u036c\5\u0096L\2\u036b")
        buf.write("\u036a\3\2\2\2\u036b\u036c\3\2\2\2\u036c\u036d\3\2\2\2")
        buf.write("\u036d\u0375\7\62\2\2\u036e\u036f\78\2\2\u036f\u0370\5")
        buf.write("\u0088E\2\u0370\u0371\79\2\2\u0371\u0375\3\2\2\2\u0372")
        buf.write("\u0373\7.\2\2\u0373\u0375\7%\2\2\u0374\u0369\3\2\2\2\u0374")
        buf.write("\u036e\3\2\2\2\u0374\u0372\3\2\2\2\u0375\u0087\3\2\2\2")
        buf.write("\u0376\u037b\5\u008aF\2\u0377\u0378\7\63\2\2\u0378\u037a")
        buf.write("\5\u008aF\2\u0379\u0377\3\2\2\2\u037a\u037d\3\2\2\2\u037b")
        buf.write("\u0379\3\2\2\2\u037b\u037c\3\2\2\2\u037c\u037f\3\2\2\2")
        buf.write("\u037d\u037b\3\2\2\2\u037e\u0380\7\63\2\2\u037f\u037e")
        buf.write("\3\2\2\2\u037f\u0380\3\2\2\2\u0380\u0089\3\2\2\2\u0381")
        buf.write("\u038d\5^\60\2\u0382\u0384\5^\60\2\u0383\u0382\3\2\2\2")
        buf.write("\u0383\u0384\3\2\2\2\u0384\u0385\3\2\2\2\u0385\u0387\7")
        buf.write("\64\2\2\u0386\u0388\5^\60\2\u0387\u0386\3\2\2\2\u0387")
        buf.write("\u0388\3\2\2\2\u0388\u038a\3\2\2\2\u0389\u038b\5\u008c")
        buf.write("G\2\u038a\u0389\3\2\2\2\u038a\u038b\3\2\2\2\u038b\u038d")
        buf.write("\3\2\2\2\u038c\u0381\3\2\2\2\u038c\u0383\3\2\2\2\u038d")
        buf.write("\u008b\3\2\2\2\u038e\u0390\7\64\2\2\u038f\u0391\5^\60")
        buf.write("\2\u0390\u038f\3\2\2\2\u0390\u0391\3\2\2\2\u0391\u008d")
        buf.write("\3\2\2\2\u0392\u0397\5p9\2\u0393\u0394\7\63\2\2\u0394")
        buf.write("\u0396\5p9\2\u0395\u0393\3\2\2\2\u0396\u0399\3\2\2\2\u0397")
        buf.write("\u0395\3\2\2\2\u0397\u0398\3\2\2\2\u0398\u039b\3\2\2\2")
        buf.write("\u0399\u0397\3\2\2\2\u039a\u039c\7\63\2\2\u039b\u039a")
        buf.write("\3\2\2\2\u039b\u039c\3\2\2\2\u039c\u008f\3\2\2\2\u039d")
        buf.write("\u03a2\5^\60\2\u039e\u039f\7\63\2\2\u039f\u03a1\5^\60")
        buf.write("\2\u03a0\u039e\3\2\2\2\u03a1\u03a4\3\2\2\2\u03a2\u03a0")
        buf.write("\3\2\2\2\u03a2\u03a3\3\2\2\2\u03a3\u03a6\3\2\2\2\u03a4")
        buf.write("\u03a2\3\2\2\2\u03a5\u03a7\7\63\2\2\u03a6\u03a5\3\2\2")
        buf.write("\2\u03a6\u03a7\3\2\2\2\u03a7\u0091\3\2\2\2\u03a8\u03a9")
        buf.write("\5^\60\2\u03a9\u03aa\7\64\2\2\u03aa\u03b9\5^\60\2\u03ab")
        buf.write("\u03ba\5\u009cO\2\u03ac\u03ad\7\63\2\2\u03ad\u03ae\5^")
        buf.write("\60\2\u03ae\u03af\7\64\2\2\u03af\u03b0\5^\60\2\u03b0\u03b2")
        buf.write("\3\2\2\2\u03b1\u03ac\3\2\2\2\u03b2\u03b5\3\2\2\2\u03b3")
        buf.write("\u03b1\3\2\2\2\u03b3\u03b4\3\2\2\2\u03b4\u03b7\3\2\2\2")
        buf.write("\u03b5\u03b3\3\2\2\2\u03b6\u03b8\7\63\2\2\u03b7\u03b6")
        buf.write("\3\2\2\2\u03b7\u03b8\3\2\2\2\u03b8\u03ba\3\2\2\2\u03b9")
        buf.write("\u03ab\3\2\2\2\u03b9\u03b3\3\2\2\2\u03ba\u03ca\3\2\2\2")
        buf.write("\u03bb\u03c7\5^\60\2\u03bc\u03c8\5\u009cO\2\u03bd\u03be")
        buf.write("\7\63\2\2\u03be\u03c0\5^\60\2\u03bf\u03bd\3\2\2\2\u03c0")
        buf.write("\u03c3\3\2\2\2\u03c1\u03bf\3\2\2\2\u03c1\u03c2\3\2\2\2")
        buf.write("\u03c2\u03c5\3\2\2\2\u03c3\u03c1\3\2\2\2\u03c4\u03c6\7")
        buf.write("\63\2\2\u03c5\u03c4\3\2\2\2\u03c5\u03c6\3\2\2\2\u03c6")
        buf.write("\u03c8\3\2\2\2\u03c7\u03bc\3\2\2\2\u03c7\u03c1\3\2\2\2")
        buf.write("\u03c8\u03ca\3\2\2\2\u03c9\u03a8\3\2\2\2\u03c9\u03bb\3")
        buf.write("\2\2\2\u03ca\u0093\3\2\2\2\u03cb\u03cc\7\36\2\2\u03cc")
        buf.write("\u03d2\7%\2\2\u03cd\u03cf\7\61\2\2\u03ce\u03d0\5\u0096")
        buf.write("L\2\u03cf\u03ce\3\2\2\2\u03cf\u03d0\3\2\2\2\u03d0\u03d1")
        buf.write("\3\2\2\2\u03d1\u03d3\7\62\2\2\u03d2\u03cd\3\2\2\2\u03d2")
        buf.write("\u03d3\3\2\2\2\u03d3\u03d4\3\2\2\2\u03d4\u03d5\7\64\2")
        buf.write("\2\u03d5\u03d6\5\\/\2\u03d6\u0095\3\2\2\2\u03d7\u03d8")
        buf.write("\5\u0098M\2\u03d8\u03d9\7\63\2\2\u03d9\u03db\3\2\2\2\u03da")
        buf.write("\u03d7\3\2\2\2\u03db\u03de\3\2\2\2\u03dc\u03da\3\2\2\2")
        buf.write("\u03dc\u03dd\3\2\2\2\u03dd\u03f3\3\2\2\2\u03de\u03dc\3")
        buf.write("\2\2\2\u03df\u03e1\5\u0098M\2\u03e0\u03e2\7\63\2\2\u03e1")
        buf.write("\u03e0\3\2\2\2\u03e1\u03e2\3\2\2\2\u03e2\u03f4\3\2\2\2")
        buf.write("\u03e3\u03e4\7\60\2\2\u03e4\u03e9\5^\60\2\u03e5\u03e6")
        buf.write("\7\63\2\2\u03e6\u03e8\5\u0098M\2\u03e7\u03e5\3\2\2\2\u03e8")
        buf.write("\u03eb\3\2\2\2\u03e9\u03e7\3\2\2\2\u03e9\u03ea\3\2\2\2")
        buf.write("\u03ea\u03ef\3\2\2\2\u03eb\u03e9\3\2\2\2\u03ec\u03ed\7")
        buf.write("\63\2\2\u03ed\u03ee\7\66\2\2\u03ee\u03f0\5^\60\2\u03ef")
        buf.write("\u03ec\3\2\2\2\u03ef\u03f0\3\2\2\2\u03f0\u03f4\3\2\2\2")
        buf.write("\u03f1\u03f2\7\66\2\2\u03f2\u03f4\5^\60\2\u03f3\u03df")
        buf.write("\3\2\2\2\u03f3\u03e3\3\2\2\2\u03f3\u03f1\3\2\2\2\u03f4")
        buf.write("\u0097\3\2\2\2\u03f5\u03f7\5^\60\2\u03f6\u03f8\5\u009c")
        buf.write("O\2\u03f7\u03f6\3\2\2\2\u03f7\u03f8\3\2\2\2\u03f8\u03fe")
        buf.write("\3\2\2\2\u03f9\u03fa\5^\60\2\u03fa\u03fb\7\67\2\2\u03fb")
        buf.write("\u03fc\5^\60\2\u03fc\u03fe\3\2\2\2\u03fd\u03f5\3\2\2\2")
        buf.write("\u03fd\u03f9\3\2\2\2\u03fe\u0099\3\2\2\2\u03ff\u0402\5")
        buf.write("\u009cO\2\u0400\u0402\5\u009eP\2\u0401\u03ff\3\2\2\2\u0401")
        buf.write("\u0400\3\2\2\2\u0402\u009b\3\2\2\2\u0403\u0404\7\20\2")
        buf.write("\2\u0404\u0405\5\u008eH\2\u0405\u0406\7\21\2\2\u0406\u0408")
        buf.write("\5f\64\2\u0407\u0409\5\u009aN\2\u0408\u0407\3\2\2\2\u0408")
        buf.write("\u0409\3\2\2\2\u0409\u009d\3\2\2\2\u040a\u040b\7\f\2\2")
        buf.write("\u040b\u040d\5`\61\2\u040c\u040e\5\u009aN\2\u040d\u040c")
        buf.write("\3\2\2\2\u040d\u040e\3\2\2\2\u040e\u009f\3\2\2\2\u040f")
        buf.write("\u0411\7\37\2\2\u0410\u0412\5\u00a2R\2\u0411\u0410\3\2")
        buf.write("\2\2\u0411\u0412\3\2\2\2\u0412\u00a1\3\2\2\2\u0413\u0414")
        buf.write("\7\6\2\2\u0414\u0417\5^\60\2\u0415\u0417\5\u0090I\2\u0416")
        buf.write("\u0413\3\2\2\2\u0416\u0415\3\2\2\2\u0417\u00a3\3\2\2\2")
        buf.write("\u0418\u0419\t\4\2\2\u0419\u00a5\3\2\2\2\u041a\u041e\5")
        buf.write("\u00a8U\2\u041b\u041e\7,\2\2\u041c\u041e\7-\2\2\u041d")
        buf.write("\u041a\3\2\2\2\u041d\u041b\3\2\2\2\u041d\u041c\3\2\2\2")
        buf.write("\u041e\u00a7\3\2\2\2\u041f\u0420\t\5\2\2\u0420\u00a9\3")
        buf.write("\2\2\2\u0098\u00af\u00b3\u00b5\u00be\u00c7\u00ca\u00d1")
        buf.write("\u00d6\u00dd\u00e4\u00eb\u00f1\u00f5\u00fb\u0101\u0105")
        buf.write("\u010b\u010f\u0111\u0115\u011b\u011f\u0125\u0129\u012e")
        buf.write("\u0133\u0139\u013d\u0143\u0149\u014d\u0153\u0157\u0159")
        buf.write("\u015d\u0163\u0167\u016d\u0171\u0177\u017e\u0182\u018e")
        buf.write("\u0194\u0199\u019d\u01a0\u01a4\u01a9\u01ad\u01b1\u01bf")
        buf.write("\u01c7\u01cf\u01d1\u01d5\u01de\u01e5\u01e7\u01f0\u01f5")
        buf.write("\u01fa\u0201\u0205\u020c\u0214\u021d\u0226\u022d\u0237")
        buf.write("\u0244\u024a\u0253\u025e\u0269\u026e\u0273\u0278\u0280")
        buf.write("\u0289\u028f\u0291\u0299\u029d\u02a5\u02a8\u02ac\u02b0")
        buf.write("\u02b7\u02c1\u02c9\u02cf\u02d7\u02e7\u02ea\u02f3\u02fb")
        buf.write("\u0303\u030b\u030d\u0315\u0317\u0325\u0327\u0331\u0337")
        buf.write("\u033c\u0341\u0346\u034b\u0353\u0359\u0361\u0365\u0367")
        buf.write("\u036b\u0374\u037b\u037f\u0383\u0387\u038a\u038c\u0390")
        buf.write("\u0397\u039b\u03a2\u03a6\u03b3\u03b7\u03b9\u03c1\u03c5")
        buf.write("\u03c7\u03c9\u03cf\u03d2\u03dc\u03e1\u03e9\u03ef\u03f3")
        buf.write("\u03f7\u03fd\u0401\u0408\u040d\u0411\u0416\u041d")
        return buf.getvalue()


class Python3Parser ( Parser ):

    grammarFileName = "Python3.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'def'", "'return'", "'raise'", "'from'", 
                     "'import'", "'as'", "'global'", "'nonlocal'", "'assert'", 
                     "'if'", "'elif'", "'else'", "'while'", "'for'", "'in'", 
                     "'try'", "'finally'", "'with'", "'except'", "'lambda'", 
                     "'or'", "'and'", "'not'", "'is'", "'None'", "'True'", 
                     "'False'", "'class'", "'yield'", "'del'", "'pass'", 
                     "'continue'", "'break'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'.'", "'...'", "'*'", "'('", "')'", "','", "':'", 
                     "';'", "'**'", "'='", "'['", "']'", "'|'", "'^'", "'&'", 
                     "'<<'", "'>>'", "'+'", "'-'", "'/'", "'%'", "'//'", 
                     "'~'", "'{'", "'}'", "'<'", "'>'", "'=='", "'>='", 
                     "'<='", "'<>'", "'!='", "'@'", "'->'", "'+='", "'-='", 
                     "'*='", "'@='", "'/='", "'%='", "'&='", "'|='", "'^='", 
                     "'<<='", "'>>='", "'**='", "'//='" ]

    symbolicNames = [ "<INVALID>", "DEF", "RETURN", "RAISE", "FROM", "IMPORT", 
                      "AS", "GLOBAL", "NONLOCAL", "ASSERT", "IF", "ELIF", 
                      "ELSE", "WHILE", "FOR", "IN", "TRY", "FINALLY", "WITH", 
                      "EXCEPT", "LAMBDA", "OR", "AND", "NOT", "IS", "NONE", 
                      "TRUE", "FALSE", "CLASS", "YIELD", "DEL", "PASS", 
                      "CONTINUE", "BREAK", "NEWLINE", "NAME", "STRING_LITERAL", 
                      "BYTES_LITERAL", "DECIMAL_INTEGER", "OCT_INTEGER", 
                      "HEX_INTEGER", "BIN_INTEGER", "FLOAT_NUMBER", "IMAG_NUMBER", 
                      "DOT", "ELLIPSIS", "STAR", "OPEN_PAREN", "CLOSE_PAREN", 
                      "COMMA", "COLON", "SEMI_COLON", "POWER", "ASSIGN", 
                      "OPEN_BRACK", "CLOSE_BRACK", "OR_OP", "XOR", "AND_OP", 
                      "LEFT_SHIFT", "RIGHT_SHIFT", "ADD", "MINUS", "DIV", 
                      "MOD", "IDIV", "NOT_OP", "OPEN_BRACE", "CLOSE_BRACE", 
                      "LESS_THAN", "GREATER_THAN", "EQUALS", "GT_EQ", "LT_EQ", 
                      "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW", "ADD_ASSIGN", 
                      "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN", "DIV_ASSIGN", 
                      "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
                      "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", 
                      "IDIV_ASSIGN", "SKIP_", "UNKNOWN_CHAR", "INDENT", 
                      "DEDENT" ]

    RULE_single_input = 0
    RULE_file_input = 1
    RULE_eval_input = 2
    RULE_decorator = 3
    RULE_decorators = 4
    RULE_decorated = 5
    RULE_funcdef = 6
    RULE_parameters = 7
    RULE_typedargslist = 8
    RULE_tfpdef = 9
    RULE_varargslist = 10
    RULE_vfpdef = 11
    RULE_stmt = 12
    RULE_simple_stmt = 13
    RULE_small_stmt = 14
    RULE_expr_stmt = 15
    RULE_testlist_star_expr = 16
    RULE_augassign = 17
    RULE_del_stmt = 18
    RULE_pass_stmt = 19
    RULE_flow_stmt = 20
    RULE_break_stmt = 21
    RULE_continue_stmt = 22
    RULE_return_stmt = 23
    RULE_yield_stmt = 24
    RULE_raise_stmt = 25
    RULE_import_stmt = 26
    RULE_import_name = 27
    RULE_import_from = 28
    RULE_import_as_name = 29
    RULE_dotted_as_name = 30
    RULE_import_as_names = 31
    RULE_dotted_as_names = 32
    RULE_dotted_name = 33
    RULE_global_stmt = 34
    RULE_nonlocal_stmt = 35
    RULE_assert_stmt = 36
    RULE_compound_stmt = 37
    RULE_if_stmt = 38
    RULE_while_stmt = 39
    RULE_for_stmt = 40
    RULE_try_stmt = 41
    RULE_with_stmt = 42
    RULE_with_item = 43
    RULE_except_clause = 44
    RULE_suite = 45
    RULE_test = 46
    RULE_test_nocond = 47
    RULE_lambdef = 48
    RULE_lambdef_nocond = 49
    RULE_or_test = 50
    RULE_and_test = 51
    RULE_not_test = 52
    RULE_comparison = 53
    RULE_comp_op = 54
    RULE_star_expr = 55
    RULE_expr = 56
    RULE_xor_expr = 57
    RULE_and_expr = 58
    RULE_shift_expr = 59
    RULE_arith_expr = 60
    RULE_term = 61
    RULE_factor = 62
    RULE_power = 63
    RULE_atom = 64
    RULE_testlist_comp = 65
    RULE_trailer = 66
    RULE_subscriptlist = 67
    RULE_subscript = 68
    RULE_sliceop = 69
    RULE_exprlist = 70
    RULE_testlist = 71
    RULE_dictorsetmaker = 72
    RULE_classdef = 73
    RULE_arglist = 74
    RULE_argument = 75
    RULE_comp_iter = 76
    RULE_comp_for = 77
    RULE_comp_if = 78
    RULE_yield_expr = 79
    RULE_yield_arg = 80
    RULE_strr = 81
    RULE_number = 82
    RULE_integer = 83

    ruleNames =  [ "single_input", "file_input", "eval_input", "decorator", 
                   "decorators", "decorated", "funcdef", "parameters", "typedargslist", 
                   "tfpdef", "varargslist", "vfpdef", "stmt", "simple_stmt", 
                   "small_stmt", "expr_stmt", "testlist_star_expr", "augassign", 
                   "del_stmt", "pass_stmt", "flow_stmt", "break_stmt", "continue_stmt", 
                   "return_stmt", "yield_stmt", "raise_stmt", "import_stmt", 
                   "import_name", "import_from", "import_as_name", "dotted_as_name", 
                   "import_as_names", "dotted_as_names", "dotted_name", 
                   "global_stmt", "nonlocal_stmt", "assert_stmt", "compound_stmt", 
                   "if_stmt", "while_stmt", "for_stmt", "try_stmt", "with_stmt", 
                   "with_item", "except_clause", "suite", "test", "test_nocond", 
                   "lambdef", "lambdef_nocond", "or_test", "and_test", "not_test", 
                   "comparison", "comp_op", "star_expr", "expr", "xor_expr", 
                   "and_expr", "shift_expr", "arith_expr", "term", "factor", 
                   "power", "atom", "testlist_comp", "trailer", "subscriptlist", 
                   "subscript", "sliceop", "exprlist", "testlist", "dictorsetmaker", 
                   "classdef", "arglist", "argument", "comp_iter", "comp_for", 
                   "comp_if", "yield_expr", "yield_arg", "strr", "number", 
                   "integer" ]

    EOF = Token.EOF
    DEF=1
    RETURN=2
    RAISE=3
    FROM=4
    IMPORT=5
    AS=6
    GLOBAL=7
    NONLOCAL=8
    ASSERT=9
    IF=10
    ELIF=11
    ELSE=12
    WHILE=13
    FOR=14
    IN=15
    TRY=16
    FINALLY=17
    WITH=18
    EXCEPT=19
    LAMBDA=20
    OR=21
    AND=22
    NOT=23
    IS=24
    NONE=25
    TRUE=26
    FALSE=27
    CLASS=28
    YIELD=29
    DEL=30
    PASS=31
    CONTINUE=32
    BREAK=33
    NEWLINE=34
    NAME=35
    STRING_LITERAL=36
    BYTES_LITERAL=37
    DECIMAL_INTEGER=38
    OCT_INTEGER=39
    HEX_INTEGER=40
    BIN_INTEGER=41
    FLOAT_NUMBER=42
    IMAG_NUMBER=43
    DOT=44
    ELLIPSIS=45
    STAR=46
    OPEN_PAREN=47
    CLOSE_PAREN=48
    COMMA=49
    COLON=50
    SEMI_COLON=51
    POWER=52
    ASSIGN=53
    OPEN_BRACK=54
    CLOSE_BRACK=55
    OR_OP=56
    XOR=57
    AND_OP=58
    LEFT_SHIFT=59
    RIGHT_SHIFT=60
    ADD=61
    MINUS=62
    DIV=63
    MOD=64
    IDIV=65
    NOT_OP=66
    OPEN_BRACE=67
    CLOSE_BRACE=68
    LESS_THAN=69
    GREATER_THAN=70
    EQUALS=71
    GT_EQ=72
    LT_EQ=73
    NOT_EQ_1=74
    NOT_EQ_2=75
    AT=76
    ARROW=77
    ADD_ASSIGN=78
    SUB_ASSIGN=79
    MULT_ASSIGN=80
    AT_ASSIGN=81
    DIV_ASSIGN=82
    MOD_ASSIGN=83
    AND_ASSIGN=84
    OR_ASSIGN=85
    XOR_ASSIGN=86
    LEFT_SHIFT_ASSIGN=87
    RIGHT_SHIFT_ASSIGN=88
    POWER_ASSIGN=89
    IDIV_ASSIGN=90
    SKIP_=91
    UNKNOWN_CHAR=92
    INDENT=93
    DEDENT=94

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class Single_inputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def simple_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_single_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_input" ):
                listener.enterSingle_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_input" ):
                listener.exitSingle_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingle_input" ):
                return visitor.visitSingle_input(self)
            else:
                return visitor.visitChildren(self)




    def single_input(self):

        localctx = Python3Parser.Single_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_single_input)
        try:
            self.state = 173
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NEWLINE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 168
                self.match(Python3Parser.NEWLINE)
                pass
            elif token in [Python3Parser.RETURN, Python3Parser.RAISE, Python3Parser.FROM, Python3Parser.IMPORT, Python3Parser.GLOBAL, Python3Parser.NONLOCAL, Python3Parser.ASSERT, Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.YIELD, Python3Parser.DEL, Python3Parser.PASS, Python3Parser.CONTINUE, Python3Parser.BREAK, Python3Parser.NAME, Python3Parser.STRING_LITERAL, Python3Parser.BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 169
                self.simple_stmt()
                pass
            elif token in [Python3Parser.DEF, Python3Parser.IF, Python3Parser.WHILE, Python3Parser.FOR, Python3Parser.TRY, Python3Parser.WITH, Python3Parser.CLASS, Python3Parser.AT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 170
                self.compound_stmt()
                self.state = 171
                self.match(Python3Parser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class File_inputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(Python3Parser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NEWLINE)
            else:
                return self.getToken(Python3Parser.NEWLINE, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StmtContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_file_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_input" ):
                listener.enterFile_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_input" ):
                listener.exitFile_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_input" ):
                return visitor.visitFile_input(self)
            else:
                return visitor.visitChildren(self)




    def file_input(self):

        localctx = Python3Parser.File_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_file_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.DEF) | (1 << Python3Parser.RETURN) | (1 << Python3Parser.RAISE) | (1 << Python3Parser.FROM) | (1 << Python3Parser.IMPORT) | (1 << Python3Parser.GLOBAL) | (1 << Python3Parser.NONLOCAL) | (1 << Python3Parser.ASSERT) | (1 << Python3Parser.IF) | (1 << Python3Parser.WHILE) | (1 << Python3Parser.FOR) | (1 << Python3Parser.TRY) | (1 << Python3Parser.WITH) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.CLASS) | (1 << Python3Parser.YIELD) | (1 << Python3Parser.DEL) | (1 << Python3Parser.PASS) | (1 << Python3Parser.CONTINUE) | (1 << Python3Parser.BREAK) | (1 << Python3Parser.NEWLINE) | (1 << Python3Parser.NAME) | (1 << Python3Parser.STRING_LITERAL) | (1 << Python3Parser.BYTES_LITERAL) | (1 << Python3Parser.DECIMAL_INTEGER) | (1 << Python3Parser.OCT_INTEGER) | (1 << Python3Parser.HEX_INTEGER) | (1 << Python3Parser.BIN_INTEGER) | (1 << Python3Parser.FLOAT_NUMBER) | (1 << Python3Parser.IMAG_NUMBER) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.OPEN_BRACK) | (1 << Python3Parser.ADD) | (1 << Python3Parser.MINUS))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (Python3Parser.NOT_OP - 66)) | (1 << (Python3Parser.OPEN_BRACE - 66)) | (1 << (Python3Parser.AT - 66)))) != 0):
                self.state = 177
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.NEWLINE]:
                    self.state = 175
                    self.match(Python3Parser.NEWLINE)
                    pass
                elif token in [Python3Parser.DEF, Python3Parser.RETURN, Python3Parser.RAISE, Python3Parser.FROM, Python3Parser.IMPORT, Python3Parser.GLOBAL, Python3Parser.NONLOCAL, Python3Parser.ASSERT, Python3Parser.IF, Python3Parser.WHILE, Python3Parser.FOR, Python3Parser.TRY, Python3Parser.WITH, Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.CLASS, Python3Parser.YIELD, Python3Parser.DEL, Python3Parser.PASS, Python3Parser.CONTINUE, Python3Parser.BREAK, Python3Parser.NAME, Python3Parser.STRING_LITERAL, Python3Parser.BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE, Python3Parser.AT]:
                    self.state = 176
                    self.stmt()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 181
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 182
            self.match(Python3Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Eval_inputContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def EOF(self):
            return self.getToken(Python3Parser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NEWLINE)
            else:
                return self.getToken(Python3Parser.NEWLINE, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_eval_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEval_input" ):
                listener.enterEval_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEval_input" ):
                listener.exitEval_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEval_input" ):
                return visitor.visitEval_input(self)
            else:
                return visitor.visitChildren(self)




    def eval_input(self):

        localctx = Python3Parser.Eval_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_eval_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 184
            self.testlist()
            self.state = 188
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.NEWLINE:
                self.state = 185
                self.match(Python3Parser.NEWLINE)
                self.state = 190
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 191
            self.match(Python3Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_nameContext,0)


        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_decorator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorator" ):
                listener.enterDecorator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorator" ):
                listener.exitDecorator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorator" ):
                return visitor.visitDecorator(self)
            else:
                return visitor.visitChildren(self)




    def decorator(self):

        localctx = Python3Parser.DecoratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_decorator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 193
            self.match(Python3Parser.AT)
            self.state = 194
            self.dotted_name()
            self.state = 200
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.OPEN_PAREN:
                self.state = 195
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 197
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (1 << (Python3Parser.STRING_LITERAL - 20)) | (1 << (Python3Parser.BYTES_LITERAL - 20)) | (1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.POWER - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 196
                    self.arglist()


                self.state = 199
                self.match(Python3Parser.CLOSE_PAREN)


            self.state = 202
            self.match(Python3Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratorsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.DecoratorContext)
            else:
                return self.getTypedRuleContext(Python3Parser.DecoratorContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_decorators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorators" ):
                listener.enterDecorators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorators" ):
                listener.exitDecorators(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorators" ):
                return visitor.visitDecorators(self)
            else:
                return visitor.visitChildren(self)




    def decorators(self):

        localctx = Python3Parser.DecoratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_decorators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 205 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 204
                self.decorator()
                self.state = 207 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==Python3Parser.AT):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecoratedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorators(self):
            return self.getTypedRuleContext(Python3Parser.DecoratorsContext,0)


        def classdef(self):
            return self.getTypedRuleContext(Python3Parser.ClassdefContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(Python3Parser.FuncdefContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_decorated

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorated" ):
                listener.enterDecorated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorated" ):
                listener.exitDecorated(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorated" ):
                return visitor.visitDecorated(self)
            else:
                return visitor.visitChildren(self)




    def decorated(self):

        localctx = Python3Parser.DecoratedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_decorated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 209
            self.decorators()
            self.state = 212
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.CLASS]:
                self.state = 210
                self.classdef()
                pass
            elif token in [Python3Parser.DEF]:
                self.state = 211
                self.funcdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FuncdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(Python3Parser.DEF, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def parameters(self):
            return self.getTypedRuleContext(Python3Parser.ParametersContext,0)


        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext,0)


        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_funcdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncdef" ):
                listener.enterFuncdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncdef" ):
                listener.exitFuncdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncdef" ):
                return visitor.visitFuncdef(self)
            else:
                return visitor.visitChildren(self)




    def funcdef(self):

        localctx = Python3Parser.FuncdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_funcdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 214
            self.match(Python3Parser.DEF)
            self.state = 215
            self.match(Python3Parser.NAME)
            self.state = 216
            self.parameters()
            self.state = 219
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ARROW:
                self.state = 217
                self.match(Python3Parser.ARROW)
                self.state = 218
                self.test()


            self.state = 221
            self.match(Python3Parser.COLON)
            self.state = 222
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedargslist(self):
            return self.getTypedRuleContext(Python3Parser.TypedargslistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameters" ):
                listener.enterParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameters" ):
                listener.exitParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameters" ):
                return visitor.visitParameters(self)
            else:
                return visitor.visitChildren(self)




    def parameters(self):

        localctx = Python3Parser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 224
            self.match(Python3Parser.OPEN_PAREN)
            self.state = 226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.POWER))) != 0):
                self.state = 225
                self.typedargslist()


            self.state = 228
            self.match(Python3Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypedargslistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TfpdefContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TfpdefContext,i)


        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_typedargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedargslist" ):
                listener.enterTypedargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedargslist" ):
                listener.exitTypedargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedargslist" ):
                return visitor.visitTypedargslist(self)
            else:
                return visitor.visitChildren(self)




    def typedargslist(self):

        localctx = Python3Parser.TypedargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_typedargslist)
        self._la = 0 # Token type
        try:
            self.state = 295
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 230
                self.tfpdef()
                self.state = 233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.ASSIGN:
                    self.state = 231
                    self.match(Python3Parser.ASSIGN)
                    self.state = 232
                    self.test()


                self.state = 243
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 235
                        self.match(Python3Parser.COMMA)
                        self.state = 236
                        self.tfpdef()
                        self.state = 239
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.ASSIGN:
                            self.state = 237
                            self.match(Python3Parser.ASSIGN)
                            self.state = 238
                            self.test()

                 
                    self.state = 245
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

                self.state = 271
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 246
                    self.match(Python3Parser.COMMA)
                    self.state = 269
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.STAR]:
                        self.state = 247
                        self.match(Python3Parser.STAR)
                        self.state = 249
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.NAME:
                            self.state = 248
                            self.tfpdef()


                        self.state = 259
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 251
                                self.match(Python3Parser.COMMA)
                                self.state = 252
                                self.tfpdef()
                                self.state = 255
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==Python3Parser.ASSIGN:
                                    self.state = 253
                                    self.match(Python3Parser.ASSIGN)
                                    self.state = 254
                                    self.test()

                         
                            self.state = 261
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

                        self.state = 265
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.COMMA:
                            self.state = 262
                            self.match(Python3Parser.COMMA)
                            self.state = 263
                            self.match(Python3Parser.POWER)
                            self.state = 264
                            self.tfpdef()


                        pass
                    elif token in [Python3Parser.POWER]:
                        self.state = 267
                        self.match(Python3Parser.POWER)
                        self.state = 268
                        self.tfpdef()
                        pass
                    elif token in [Python3Parser.CLOSE_PAREN]:
                        pass
                    else:
                        pass


                pass
            elif token in [Python3Parser.STAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 273
                self.match(Python3Parser.STAR)
                self.state = 275
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.NAME:
                    self.state = 274
                    self.tfpdef()


                self.state = 285
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 277
                        self.match(Python3Parser.COMMA)
                        self.state = 278
                        self.tfpdef()
                        self.state = 281
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.ASSIGN:
                            self.state = 279
                            self.match(Python3Parser.ASSIGN)
                            self.state = 280
                            self.test()

                 
                    self.state = 287
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

                self.state = 291
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 288
                    self.match(Python3Parser.COMMA)
                    self.state = 289
                    self.match(Python3Parser.POWER)
                    self.state = 290
                    self.tfpdef()


                pass
            elif token in [Python3Parser.POWER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 293
                self.match(Python3Parser.POWER)
                self.state = 294
                self.tfpdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TfpdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_tfpdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTfpdef" ):
                listener.enterTfpdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTfpdef" ):
                listener.exitTfpdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTfpdef" ):
                return visitor.visitTfpdef(self)
            else:
                return visitor.visitChildren(self)




    def tfpdef(self):

        localctx = Python3Parser.TfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_tfpdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 297
            self.match(Python3Parser.NAME)
            self.state = 300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COLON:
                self.state = 298
                self.match(Python3Parser.COLON)
                self.state = 299
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarargslistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.VfpdefContext)
            else:
                return self.getTypedRuleContext(Python3Parser.VfpdefContext,i)


        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_varargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarargslist" ):
                listener.enterVarargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarargslist" ):
                listener.exitVarargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarargslist" ):
                return visitor.visitVarargslist(self)
            else:
                return visitor.visitChildren(self)




    def varargslist(self):

        localctx = Python3Parser.VarargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_varargslist)
        self._la = 0 # Token type
        try:
            self.state = 367
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 302
                self.vfpdef()
                self.state = 305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.ASSIGN:
                    self.state = 303
                    self.match(Python3Parser.ASSIGN)
                    self.state = 304
                    self.test()


                self.state = 315
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 307
                        self.match(Python3Parser.COMMA)
                        self.state = 308
                        self.vfpdef()
                        self.state = 311
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.ASSIGN:
                            self.state = 309
                            self.match(Python3Parser.ASSIGN)
                            self.state = 310
                            self.test()

                 
                    self.state = 317
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

                self.state = 343
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 318
                    self.match(Python3Parser.COMMA)
                    self.state = 341
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.STAR]:
                        self.state = 319
                        self.match(Python3Parser.STAR)
                        self.state = 321
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.NAME:
                            self.state = 320
                            self.vfpdef()


                        self.state = 331
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 323
                                self.match(Python3Parser.COMMA)
                                self.state = 324
                                self.vfpdef()
                                self.state = 327
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==Python3Parser.ASSIGN:
                                    self.state = 325
                                    self.match(Python3Parser.ASSIGN)
                                    self.state = 326
                                    self.test()

                         
                            self.state = 333
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

                        self.state = 337
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.COMMA:
                            self.state = 334
                            self.match(Python3Parser.COMMA)
                            self.state = 335
                            self.match(Python3Parser.POWER)
                            self.state = 336
                            self.vfpdef()


                        pass
                    elif token in [Python3Parser.POWER]:
                        self.state = 339
                        self.match(Python3Parser.POWER)
                        self.state = 340
                        self.vfpdef()
                        pass
                    elif token in [Python3Parser.COLON]:
                        pass
                    else:
                        pass


                pass
            elif token in [Python3Parser.STAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 345
                self.match(Python3Parser.STAR)
                self.state = 347
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.NAME:
                    self.state = 346
                    self.vfpdef()


                self.state = 357
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 349
                        self.match(Python3Parser.COMMA)
                        self.state = 350
                        self.vfpdef()
                        self.state = 353
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Python3Parser.ASSIGN:
                            self.state = 351
                            self.match(Python3Parser.ASSIGN)
                            self.state = 352
                            self.test()

                 
                    self.state = 359
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

                self.state = 363
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 360
                    self.match(Python3Parser.COMMA)
                    self.state = 361
                    self.match(Python3Parser.POWER)
                    self.state = 362
                    self.vfpdef()


                pass
            elif token in [Python3Parser.POWER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 365
                self.match(Python3Parser.POWER)
                self.state = 366
                self.vfpdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VfpdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_vfpdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVfpdef" ):
                listener.enterVfpdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVfpdef" ):
                listener.exitVfpdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfpdef" ):
                return visitor.visitVfpdef(self)
            else:
                return visitor.visitChildren(self)




    def vfpdef(self):

        localctx = Python3Parser.VfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_vfpdef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self.match(Python3Parser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStmt" ):
                return visitor.visitStmt(self)
            else:
                return visitor.visitChildren(self)




    def stmt(self):

        localctx = Python3Parser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_stmt)
        try:
            self.state = 373
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.RETURN, Python3Parser.RAISE, Python3Parser.FROM, Python3Parser.IMPORT, Python3Parser.GLOBAL, Python3Parser.NONLOCAL, Python3Parser.ASSERT, Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.YIELD, Python3Parser.DEL, Python3Parser.PASS, Python3Parser.CONTINUE, Python3Parser.BREAK, Python3Parser.NAME, Python3Parser.STRING_LITERAL, Python3Parser.BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 371
                self.simple_stmt()
                pass
            elif token in [Python3Parser.DEF, Python3Parser.IF, Python3Parser.WHILE, Python3Parser.FOR, Python3Parser.TRY, Python3Parser.WITH, Python3Parser.CLASS, Python3Parser.AT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 372
                self.compound_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def small_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Small_stmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Small_stmtContext,i)


        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_simple_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_stmt" ):
                listener.enterSimple_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_stmt" ):
                listener.exitSimple_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_stmt" ):
                return visitor.visitSimple_stmt(self)
            else:
                return visitor.visitChildren(self)




    def simple_stmt(self):

        localctx = Python3Parser.Simple_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_simple_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 375
            self.small_stmt()
            self.state = 380
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 376
                    self.match(Python3Parser.SEMI_COLON)
                    self.state = 377
                    self.small_stmt() 
                self.state = 382
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

            self.state = 384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.SEMI_COLON:
                self.state = 383
                self.match(Python3Parser.SEMI_COLON)


            self.state = 386
            self.match(Python3Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Small_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Expr_stmtContext,0)


        def del_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Del_stmtContext,0)


        def pass_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Pass_stmtContext,0)


        def flow_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Flow_stmtContext,0)


        def import_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Import_stmtContext,0)


        def global_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Global_stmtContext,0)


        def nonlocal_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Nonlocal_stmtContext,0)


        def assert_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Assert_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_small_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSmall_stmt" ):
                listener.enterSmall_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSmall_stmt" ):
                listener.exitSmall_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSmall_stmt" ):
                return visitor.visitSmall_stmt(self)
            else:
                return visitor.visitChildren(self)




    def small_stmt(self):

        localctx = Python3Parser.Small_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_small_stmt)
        try:
            self.state = 396
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_LITERAL, Python3Parser.BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 388
                self.expr_stmt()
                pass
            elif token in [Python3Parser.DEL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 389
                self.del_stmt()
                pass
            elif token in [Python3Parser.PASS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 390
                self.pass_stmt()
                pass
            elif token in [Python3Parser.RETURN, Python3Parser.RAISE, Python3Parser.YIELD, Python3Parser.CONTINUE, Python3Parser.BREAK]:
                self.enterOuterAlt(localctx, 4)
                self.state = 391
                self.flow_stmt()
                pass
            elif token in [Python3Parser.FROM, Python3Parser.IMPORT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 392
                self.import_stmt()
                pass
            elif token in [Python3Parser.GLOBAL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 393
                self.global_stmt()
                pass
            elif token in [Python3Parser.NONLOCAL]:
                self.enterOuterAlt(localctx, 7)
                self.state = 394
                self.nonlocal_stmt()
                pass
            elif token in [Python3Parser.ASSERT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 395
                self.assert_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expr_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist_star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Testlist_star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Testlist_star_exprContext,i)


        def augassign(self):
            return self.getTypedRuleContext(Python3Parser.AugassignContext,0)


        def yield_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Yield_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Yield_exprContext,i)


        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_expr_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_stmt" ):
                listener.enterExpr_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_stmt" ):
                listener.exitExpr_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr_stmt" ):
                return visitor.visitExpr_stmt(self)
            else:
                return visitor.visitChildren(self)




    def expr_stmt(self):

        localctx = Python3Parser.Expr_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_expr_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 398
            self.testlist_star_expr()
            self.state = 414
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.ADD_ASSIGN, Python3Parser.SUB_ASSIGN, Python3Parser.MULT_ASSIGN, Python3Parser.AT_ASSIGN, Python3Parser.DIV_ASSIGN, Python3Parser.MOD_ASSIGN, Python3Parser.AND_ASSIGN, Python3Parser.OR_ASSIGN, Python3Parser.XOR_ASSIGN, Python3Parser.LEFT_SHIFT_ASSIGN, Python3Parser.RIGHT_SHIFT_ASSIGN, Python3Parser.POWER_ASSIGN, Python3Parser.IDIV_ASSIGN]:
                self.state = 399
                self.augassign()
                self.state = 402
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.YIELD]:
                    self.state = 400
                    self.yield_expr()
                    pass
                elif token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_LITERAL, Python3Parser.BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                    self.state = 401
                    self.testlist()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [Python3Parser.NEWLINE, Python3Parser.SEMI_COLON, Python3Parser.ASSIGN]:
                self.state = 411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==Python3Parser.ASSIGN:
                    self.state = 404
                    self.match(Python3Parser.ASSIGN)
                    self.state = 407
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Python3Parser.YIELD]:
                        self.state = 405
                        self.yield_expr()
                        pass
                    elif token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_LITERAL, Python3Parser.BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                        self.state = 406
                        self.testlist_star_expr()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 413
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Testlist_star_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_exprContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_testlist_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_star_expr" ):
                listener.enterTestlist_star_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_star_expr" ):
                listener.exitTestlist_star_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_star_expr" ):
                return visitor.visitTestlist_star_expr(self)
            else:
                return visitor.visitChildren(self)




    def testlist_star_expr(self):

        localctx = Python3Parser.Testlist_star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_testlist_star_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 416
                self.test()
                pass

            elif la_ == 2:
                self.state = 417
                self.star_expr()
                pass


            self.state = 427
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 420
                    self.match(Python3Parser.COMMA)
                    self.state = 423
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                    if la_ == 1:
                        self.state = 421
                        self.test()
                        pass

                    elif la_ == 2:
                        self.state = 422
                        self.star_expr()
                        pass

             
                self.state = 429
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

            self.state = 431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 430
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AugassignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Python3Parser.RULE_augassign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAugassign" ):
                listener.enterAugassign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAugassign" ):
                listener.exitAugassign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAugassign" ):
                return visitor.visitAugassign(self)
            else:
                return visitor.visitChildren(self)




    def augassign(self):

        localctx = Python3Parser.AugassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_augassign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 433
            _la = self._input.LA(1)
            if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (Python3Parser.ADD_ASSIGN - 78)) | (1 << (Python3Parser.SUB_ASSIGN - 78)) | (1 << (Python3Parser.MULT_ASSIGN - 78)) | (1 << (Python3Parser.AT_ASSIGN - 78)) | (1 << (Python3Parser.DIV_ASSIGN - 78)) | (1 << (Python3Parser.MOD_ASSIGN - 78)) | (1 << (Python3Parser.AND_ASSIGN - 78)) | (1 << (Python3Parser.OR_ASSIGN - 78)) | (1 << (Python3Parser.XOR_ASSIGN - 78)) | (1 << (Python3Parser.LEFT_SHIFT_ASSIGN - 78)) | (1 << (Python3Parser.RIGHT_SHIFT_ASSIGN - 78)) | (1 << (Python3Parser.POWER_ASSIGN - 78)) | (1 << (Python3Parser.IDIV_ASSIGN - 78)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Del_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEL(self):
            return self.getToken(Python3Parser.DEL, 0)

        def exprlist(self):
            return self.getTypedRuleContext(Python3Parser.ExprlistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_del_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDel_stmt" ):
                listener.enterDel_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDel_stmt" ):
                listener.exitDel_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDel_stmt" ):
                return visitor.visitDel_stmt(self)
            else:
                return visitor.visitChildren(self)




    def del_stmt(self):

        localctx = Python3Parser.Del_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_del_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 435
            self.match(Python3Parser.DEL)
            self.state = 436
            self.exprlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pass_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASS(self):
            return self.getToken(Python3Parser.PASS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_pass_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPass_stmt" ):
                listener.enterPass_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPass_stmt" ):
                listener.exitPass_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPass_stmt" ):
                return visitor.visitPass_stmt(self)
            else:
                return visitor.visitChildren(self)




    def pass_stmt(self):

        localctx = Python3Parser.Pass_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_pass_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 438
            self.match(Python3Parser.PASS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Flow_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def break_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Break_stmtContext,0)


        def continue_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Continue_stmtContext,0)


        def return_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Return_stmtContext,0)


        def raise_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Raise_stmtContext,0)


        def yield_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Yield_stmtContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_flow_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlow_stmt" ):
                listener.enterFlow_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlow_stmt" ):
                listener.exitFlow_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlow_stmt" ):
                return visitor.visitFlow_stmt(self)
            else:
                return visitor.visitChildren(self)




    def flow_stmt(self):

        localctx = Python3Parser.Flow_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_flow_stmt)
        try:
            self.state = 445
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.BREAK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 440
                self.break_stmt()
                pass
            elif token in [Python3Parser.CONTINUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 441
                self.continue_stmt()
                pass
            elif token in [Python3Parser.RETURN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 442
                self.return_stmt()
                pass
            elif token in [Python3Parser.RAISE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 443
                self.raise_stmt()
                pass
            elif token in [Python3Parser.YIELD]:
                self.enterOuterAlt(localctx, 5)
                self.state = 444
                self.yield_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Break_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(Python3Parser.BREAK, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_break_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_stmt" ):
                listener.enterBreak_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_stmt" ):
                listener.exitBreak_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreak_stmt" ):
                return visitor.visitBreak_stmt(self)
            else:
                return visitor.visitChildren(self)




    def break_stmt(self):

        localctx = Python3Parser.Break_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_break_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 447
            self.match(Python3Parser.BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Continue_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(Python3Parser.CONTINUE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_continue_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_stmt" ):
                listener.enterContinue_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_stmt" ):
                listener.exitContinue_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinue_stmt" ):
                return visitor.visitContinue_stmt(self)
            else:
                return visitor.visitChildren(self)




    def continue_stmt(self):

        localctx = Python3Parser.Continue_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_continue_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 449
            self.match(Python3Parser.CONTINUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Return_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(Python3Parser.RETURN, 0)

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_return_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_stmt" ):
                listener.enterReturn_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_stmt" ):
                listener.exitReturn_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_stmt" ):
                return visitor.visitReturn_stmt(self)
            else:
                return visitor.visitChildren(self)




    def return_stmt(self):

        localctx = Python3Parser.Return_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_return_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 451
            self.match(Python3Parser.RETURN)
            self.state = 453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (1 << (Python3Parser.STRING_LITERAL - 20)) | (1 << (Python3Parser.BYTES_LITERAL - 20)) | (1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                self.state = 452
                self.testlist()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(Python3Parser.Yield_exprContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_yield_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_stmt" ):
                listener.enterYield_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_stmt" ):
                listener.exitYield_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_stmt" ):
                return visitor.visitYield_stmt(self)
            else:
                return visitor.visitChildren(self)




    def yield_stmt(self):

        localctx = Python3Parser.Yield_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_yield_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 455
            self.yield_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Raise_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(Python3Parser.RAISE, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_raise_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_stmt" ):
                listener.enterRaise_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_stmt" ):
                listener.exitRaise_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaise_stmt" ):
                return visitor.visitRaise_stmt(self)
            else:
                return visitor.visitChildren(self)




    def raise_stmt(self):

        localctx = Python3Parser.Raise_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_raise_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 457
            self.match(Python3Parser.RAISE)
            self.state = 463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (1 << (Python3Parser.STRING_LITERAL - 20)) | (1 << (Python3Parser.BYTES_LITERAL - 20)) | (1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                self.state = 458
                self.test()
                self.state = 461
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.FROM:
                    self.state = 459
                    self.match(Python3Parser.FROM)
                    self.state = 460
                    self.test()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_name(self):
            return self.getTypedRuleContext(Python3Parser.Import_nameContext,0)


        def import_from(self):
            return self.getTypedRuleContext(Python3Parser.Import_fromContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_import_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_stmt" ):
                listener.enterImport_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_stmt" ):
                listener.exitImport_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_stmt" ):
                return visitor.visitImport_stmt(self)
            else:
                return visitor.visitChildren(self)




    def import_stmt(self):

        localctx = Python3Parser.Import_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_import_stmt)
        try:
            self.state = 467
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.IMPORT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 465
                self.import_name()
                pass
            elif token in [Python3Parser.FROM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 466
                self.import_from()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(Python3Parser.IMPORT, 0)

        def dotted_as_names(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_as_namesContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_import_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_name" ):
                listener.enterImport_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_name" ):
                listener.exitImport_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_name" ):
                return visitor.visitImport_name(self)
            else:
                return visitor.visitChildren(self)




    def import_name(self):

        localctx = Python3Parser.Import_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_import_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 469
            self.match(Python3Parser.IMPORT)
            self.state = 470
            self.dotted_as_names()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_fromContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def IMPORT(self):
            return self.getToken(Python3Parser.IMPORT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_nameContext,0)


        def import_as_names(self):
            return self.getTypedRuleContext(Python3Parser.Import_as_namesContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_import_from

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_from" ):
                listener.enterImport_from(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_from" ):
                listener.exitImport_from(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_from" ):
                return visitor.visitImport_from(self)
            else:
                return visitor.visitChildren(self)




    def import_from(self):

        localctx = Python3Parser.Import_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_import_from)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 472
            self.match(Python3Parser.FROM)
            self.state = 485
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 476
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==Python3Parser.DOT or _la==Python3Parser.ELLIPSIS:
                    self.state = 473
                    _la = self._input.LA(1)
                    if not(_la==Python3Parser.DOT or _la==Python3Parser.ELLIPSIS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 478
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 479
                self.dotted_name()
                pass

            elif la_ == 2:
                self.state = 481 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 480
                    _la = self._input.LA(1)
                    if not(_la==Python3Parser.DOT or _la==Python3Parser.ELLIPSIS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 483 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==Python3Parser.DOT or _la==Python3Parser.ELLIPSIS):
                        break

                pass


            self.state = 487
            self.match(Python3Parser.IMPORT)
            self.state = 494
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.STAR]:
                self.state = 488
                self.match(Python3Parser.STAR)
                pass
            elif token in [Python3Parser.OPEN_PAREN]:
                self.state = 489
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 490
                self.import_as_names()
                self.state = 491
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token in [Python3Parser.NAME]:
                self.state = 493
                self.import_as_names()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_as_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_import_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_name" ):
                listener.enterImport_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_name" ):
                listener.exitImport_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_name" ):
                return visitor.visitImport_as_name(self)
            else:
                return visitor.visitChildren(self)




    def import_as_name(self):

        localctx = Python3Parser.Import_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_import_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496
            self.match(Python3Parser.NAME)
            self.state = 499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.AS:
                self.state = 497
                self.match(Python3Parser.AS)
                self.state = 498
                self.match(Python3Parser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_as_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(Python3Parser.Dotted_nameContext,0)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_dotted_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_name" ):
                listener.enterDotted_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_name" ):
                listener.exitDotted_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_name" ):
                return visitor.visitDotted_as_name(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_name(self):

        localctx = Python3Parser.Dotted_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_dotted_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 501
            self.dotted_name()
            self.state = 504
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.AS:
                self.state = 502
                self.match(Python3Parser.AS)
                self.state = 503
                self.match(Python3Parser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_as_namesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Import_as_nameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Import_as_nameContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_import_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_names" ):
                listener.enterImport_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_names" ):
                listener.exitImport_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_names" ):
                return visitor.visitImport_as_names(self)
            else:
                return visitor.visitChildren(self)




    def import_as_names(self):

        localctx = Python3Parser.Import_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_import_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 506
            self.import_as_name()
            self.state = 511
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 507
                    self.match(Python3Parser.COMMA)
                    self.state = 508
                    self.import_as_name() 
                self.state = 513
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

            self.state = 515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 514
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_as_namesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Dotted_as_nameContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Dotted_as_nameContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_dotted_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_names" ):
                listener.enterDotted_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_names" ):
                listener.exitDotted_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_names" ):
                return visitor.visitDotted_as_names(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_names(self):

        localctx = Python3Parser.Dotted_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_dotted_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 517
            self.dotted_as_name()
            self.state = 522
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.COMMA:
                self.state = 518
                self.match(Python3Parser.COMMA)
                self.state = 519
                self.dotted_as_name()
                self.state = 524
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dotted_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_dotted_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_name" ):
                listener.enterDotted_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_name" ):
                listener.exitDotted_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_name" ):
                return visitor.visitDotted_name(self)
            else:
                return visitor.visitChildren(self)




    def dotted_name(self):

        localctx = Python3Parser.Dotted_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_dotted_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 525
            self.match(Python3Parser.NAME)
            self.state = 530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.DOT:
                self.state = 526
                self.match(Python3Parser.DOT)
                self.state = 527
                self.match(Python3Parser.NAME)
                self.state = 532
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Global_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(Python3Parser.GLOBAL, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_global_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_stmt" ):
                listener.enterGlobal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_stmt" ):
                listener.exitGlobal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobal_stmt" ):
                return visitor.visitGlobal_stmt(self)
            else:
                return visitor.visitChildren(self)




    def global_stmt(self):

        localctx = Python3Parser.Global_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_global_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 533
            self.match(Python3Parser.GLOBAL)
            self.state = 534
            self.match(Python3Parser.NAME)
            self.state = 539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.COMMA:
                self.state = 535
                self.match(Python3Parser.COMMA)
                self.state = 536
                self.match(Python3Parser.NAME)
                self.state = 541
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Nonlocal_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONLOCAL(self):
            return self.getToken(Python3Parser.NONLOCAL, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.NAME)
            else:
                return self.getToken(Python3Parser.NAME, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_nonlocal_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonlocal_stmt" ):
                listener.enterNonlocal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonlocal_stmt" ):
                listener.exitNonlocal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonlocal_stmt" ):
                return visitor.visitNonlocal_stmt(self)
            else:
                return visitor.visitChildren(self)




    def nonlocal_stmt(self):

        localctx = Python3Parser.Nonlocal_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_nonlocal_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            self.match(Python3Parser.NONLOCAL)
            self.state = 543
            self.match(Python3Parser.NAME)
            self.state = 548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.COMMA:
                self.state = 544
                self.match(Python3Parser.COMMA)
                self.state = 545
                self.match(Python3Parser.NAME)
                self.state = 550
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assert_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(Python3Parser.ASSERT, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_assert_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssert_stmt" ):
                listener.enterAssert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssert_stmt" ):
                listener.exitAssert_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssert_stmt" ):
                return visitor.visitAssert_stmt(self)
            else:
                return visitor.visitChildren(self)




    def assert_stmt(self):

        localctx = Python3Parser.Assert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_assert_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 551
            self.match(Python3Parser.ASSERT)
            self.state = 552
            self.test()
            self.state = 555
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 553
                self.match(Python3Parser.COMMA)
                self.state = 554
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compound_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_stmt(self):
            return self.getTypedRuleContext(Python3Parser.If_stmtContext,0)


        def while_stmt(self):
            return self.getTypedRuleContext(Python3Parser.While_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(Python3Parser.For_stmtContext,0)


        def try_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Try_stmtContext,0)


        def with_stmt(self):
            return self.getTypedRuleContext(Python3Parser.With_stmtContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(Python3Parser.FuncdefContext,0)


        def classdef(self):
            return self.getTypedRuleContext(Python3Parser.ClassdefContext,0)


        def decorated(self):
            return self.getTypedRuleContext(Python3Parser.DecoratedContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_compound_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_stmt" ):
                listener.enterCompound_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_stmt" ):
                listener.exitCompound_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_stmt" ):
                return visitor.visitCompound_stmt(self)
            else:
                return visitor.visitChildren(self)




    def compound_stmt(self):

        localctx = Python3Parser.Compound_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_compound_stmt)
        try:
            self.state = 565
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.IF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 557
                self.if_stmt()
                pass
            elif token in [Python3Parser.WHILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 558
                self.while_stmt()
                pass
            elif token in [Python3Parser.FOR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 559
                self.for_stmt()
                pass
            elif token in [Python3Parser.TRY]:
                self.enterOuterAlt(localctx, 4)
                self.state = 560
                self.try_stmt()
                pass
            elif token in [Python3Parser.WITH]:
                self.enterOuterAlt(localctx, 5)
                self.state = 561
                self.with_stmt()
                pass
            elif token in [Python3Parser.DEF]:
                self.enterOuterAlt(localctx, 6)
                self.state = 562
                self.funcdef()
                pass
            elif token in [Python3Parser.CLASS]:
                self.enterOuterAlt(localctx, 7)
                self.state = 563
                self.classdef()
                pass
            elif token in [Python3Parser.AT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 564
                self.decorated()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class If_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SuiteContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SuiteContext,i)


        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.ELIF)
            else:
                return self.getToken(Python3Parser.ELIF, i)

        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_if_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_stmt" ):
                listener.enterIf_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_stmt" ):
                listener.exitIf_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_stmt" ):
                return visitor.visitIf_stmt(self)
            else:
                return visitor.visitChildren(self)




    def if_stmt(self):

        localctx = Python3Parser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_if_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 567
            self.match(Python3Parser.IF)
            self.state = 568
            self.test()
            self.state = 569
            self.match(Python3Parser.COLON)
            self.state = 570
            self.suite()
            self.state = 578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.ELIF:
                self.state = 571
                self.match(Python3Parser.ELIF)
                self.state = 572
                self.test()
                self.state = 573
                self.match(Python3Parser.COLON)
                self.state = 574
                self.suite()
                self.state = 580
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ELSE:
                self.state = 581
                self.match(Python3Parser.ELSE)
                self.state = 582
                self.match(Python3Parser.COLON)
                self.state = 583
                self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class While_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(Python3Parser.WHILE, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SuiteContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SuiteContext,i)


        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_while_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_stmt" ):
                listener.enterWhile_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_stmt" ):
                listener.exitWhile_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_stmt" ):
                return visitor.visitWhile_stmt(self)
            else:
                return visitor.visitChildren(self)




    def while_stmt(self):

        localctx = Python3Parser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_while_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            self.match(Python3Parser.WHILE)
            self.state = 587
            self.test()
            self.state = 588
            self.match(Python3Parser.COLON)
            self.state = 589
            self.suite()
            self.state = 593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ELSE:
                self.state = 590
                self.match(Python3Parser.ELSE)
                self.state = 591
                self.match(Python3Parser.COLON)
                self.state = 592
                self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Python3Parser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(Python3Parser.ExprlistContext,0)


        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SuiteContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SuiteContext,i)


        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_for_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_stmt" ):
                listener.enterFor_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_stmt" ):
                listener.exitFor_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_stmt" ):
                return visitor.visitFor_stmt(self)
            else:
                return visitor.visitChildren(self)




    def for_stmt(self):

        localctx = Python3Parser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_for_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 595
            self.match(Python3Parser.FOR)
            self.state = 596
            self.exprlist()
            self.state = 597
            self.match(Python3Parser.IN)
            self.state = 598
            self.testlist()
            self.state = 599
            self.match(Python3Parser.COLON)
            self.state = 600
            self.suite()
            self.state = 604
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.ELSE:
                self.state = 601
                self.match(Python3Parser.ELSE)
                self.state = 602
                self.match(Python3Parser.COLON)
                self.state = 603
                self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Try_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(Python3Parser.TRY, 0)

        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SuiteContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SuiteContext,i)


        def FINALLY(self):
            return self.getToken(Python3Parser.FINALLY, 0)

        def except_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Except_clauseContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Except_clauseContext,i)


        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_try_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_stmt" ):
                listener.enterTry_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_stmt" ):
                listener.exitTry_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTry_stmt" ):
                return visitor.visitTry_stmt(self)
            else:
                return visitor.visitChildren(self)




    def try_stmt(self):

        localctx = Python3Parser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_try_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 606
            self.match(Python3Parser.TRY)
            self.state = 607
            self.match(Python3Parser.COLON)
            self.state = 608
            self.suite()
            self.state = 630
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.EXCEPT]:
                self.state = 613 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 609
                    self.except_clause()
                    self.state = 610
                    self.match(Python3Parser.COLON)
                    self.state = 611
                    self.suite()
                    self.state = 615 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==Python3Parser.EXCEPT):
                        break

                self.state = 620
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.ELSE:
                    self.state = 617
                    self.match(Python3Parser.ELSE)
                    self.state = 618
                    self.match(Python3Parser.COLON)
                    self.state = 619
                    self.suite()


                self.state = 625
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.FINALLY:
                    self.state = 622
                    self.match(Python3Parser.FINALLY)
                    self.state = 623
                    self.match(Python3Parser.COLON)
                    self.state = 624
                    self.suite()


                pass
            elif token in [Python3Parser.FINALLY]:
                self.state = 627
                self.match(Python3Parser.FINALLY)
                self.state = 628
                self.match(Python3Parser.COLON)
                self.state = 629
                self.suite()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(Python3Parser.WITH, 0)

        def with_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.With_itemContext)
            else:
                return self.getTypedRuleContext(Python3Parser.With_itemContext,i)


        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_with_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_stmt" ):
                listener.enterWith_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_stmt" ):
                listener.exitWith_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_stmt" ):
                return visitor.visitWith_stmt(self)
            else:
                return visitor.visitChildren(self)




    def with_stmt(self):

        localctx = Python3Parser.With_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_with_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self.match(Python3Parser.WITH)
            self.state = 633
            self.with_item()
            self.state = 638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.COMMA:
                self.state = 634
                self.match(Python3Parser.COMMA)
                self.state = 635
                self.with_item()
                self.state = 640
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 641
            self.match(Python3Parser.COLON)
            self.state = 642
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def expr(self):
            return self.getTypedRuleContext(Python3Parser.ExprContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_with_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_item" ):
                listener.enterWith_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_item" ):
                listener.exitWith_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_item" ):
                return visitor.visitWith_item(self)
            else:
                return visitor.visitChildren(self)




    def with_item(self):

        localctx = Python3Parser.With_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_with_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            self.test()
            self.state = 647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.AS:
                self.state = 645
                self.match(Python3Parser.AS)
                self.state = 646
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Except_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(Python3Parser.EXCEPT, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def AS(self):
            return self.getToken(Python3Parser.AS, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_except_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcept_clause" ):
                listener.enterExcept_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcept_clause" ):
                listener.exitExcept_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcept_clause" ):
                return visitor.visitExcept_clause(self)
            else:
                return visitor.visitChildren(self)




    def except_clause(self):

        localctx = Python3Parser.Except_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_except_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 649
            self.match(Python3Parser.EXCEPT)
            self.state = 655
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (1 << (Python3Parser.STRING_LITERAL - 20)) | (1 << (Python3Parser.BYTES_LITERAL - 20)) | (1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                self.state = 650
                self.test()
                self.state = 653
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.AS:
                    self.state = 651
                    self.match(Python3Parser.AS)
                    self.state = 652
                    self.match(Python3Parser.NAME)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SuiteContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(Python3Parser.Simple_stmtContext,0)


        def NEWLINE(self):
            return self.getToken(Python3Parser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(Python3Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(Python3Parser.DEDENT, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StmtContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StmtContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_suite

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuite" ):
                listener.enterSuite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuite" ):
                listener.exitSuite(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuite" ):
                return visitor.visitSuite(self)
            else:
                return visitor.visitChildren(self)




    def suite(self):

        localctx = Python3Parser.SuiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_suite)
        self._la = 0 # Token type
        try:
            self.state = 667
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.RETURN, Python3Parser.RAISE, Python3Parser.FROM, Python3Parser.IMPORT, Python3Parser.GLOBAL, Python3Parser.NONLOCAL, Python3Parser.ASSERT, Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.YIELD, Python3Parser.DEL, Python3Parser.PASS, Python3Parser.CONTINUE, Python3Parser.BREAK, Python3Parser.NAME, Python3Parser.STRING_LITERAL, Python3Parser.BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 657
                self.simple_stmt()
                pass
            elif token in [Python3Parser.NEWLINE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 658
                self.match(Python3Parser.NEWLINE)
                self.state = 659
                self.match(Python3Parser.INDENT)
                self.state = 661 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 660
                    self.stmt()
                    self.state = 663 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.DEF) | (1 << Python3Parser.RETURN) | (1 << Python3Parser.RAISE) | (1 << Python3Parser.FROM) | (1 << Python3Parser.IMPORT) | (1 << Python3Parser.GLOBAL) | (1 << Python3Parser.NONLOCAL) | (1 << Python3Parser.ASSERT) | (1 << Python3Parser.IF) | (1 << Python3Parser.WHILE) | (1 << Python3Parser.FOR) | (1 << Python3Parser.TRY) | (1 << Python3Parser.WITH) | (1 << Python3Parser.LAMBDA) | (1 << Python3Parser.NOT) | (1 << Python3Parser.NONE) | (1 << Python3Parser.TRUE) | (1 << Python3Parser.FALSE) | (1 << Python3Parser.CLASS) | (1 << Python3Parser.YIELD) | (1 << Python3Parser.DEL) | (1 << Python3Parser.PASS) | (1 << Python3Parser.CONTINUE) | (1 << Python3Parser.BREAK) | (1 << Python3Parser.NAME) | (1 << Python3Parser.STRING_LITERAL) | (1 << Python3Parser.BYTES_LITERAL) | (1 << Python3Parser.DECIMAL_INTEGER) | (1 << Python3Parser.OCT_INTEGER) | (1 << Python3Parser.HEX_INTEGER) | (1 << Python3Parser.BIN_INTEGER) | (1 << Python3Parser.FLOAT_NUMBER) | (1 << Python3Parser.IMAG_NUMBER) | (1 << Python3Parser.ELLIPSIS) | (1 << Python3Parser.STAR) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.OPEN_BRACK) | (1 << Python3Parser.ADD) | (1 << Python3Parser.MINUS))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (Python3Parser.NOT_OP - 66)) | (1 << (Python3Parser.OPEN_BRACE - 66)) | (1 << (Python3Parser.AT - 66)))) != 0)):
                        break

                self.state = 665
                self.match(Python3Parser.DEDENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Or_testContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Or_testContext,i)


        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def ELSE(self):
            return self.getToken(Python3Parser.ELSE, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def lambdef(self):
            return self.getTypedRuleContext(Python3Parser.LambdefContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest" ):
                listener.enterTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest" ):
                listener.exitTest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTest" ):
                return visitor.visitTest(self)
            else:
                return visitor.visitChildren(self)




    def test(self):

        localctx = Python3Parser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_test)
        self._la = 0 # Token type
        try:
            self.state = 678
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_LITERAL, Python3Parser.BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 669
                self.or_test()
                self.state = 675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.IF:
                    self.state = 670
                    self.match(Python3Parser.IF)
                    self.state = 671
                    self.or_test()
                    self.state = 672
                    self.match(Python3Parser.ELSE)
                    self.state = 673
                    self.test()


                pass
            elif token in [Python3Parser.LAMBDA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 677
                self.lambdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Test_nocondContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self):
            return self.getTypedRuleContext(Python3Parser.Or_testContext,0)


        def lambdef_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Lambdef_nocondContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_test_nocond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest_nocond" ):
                listener.enterTest_nocond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest_nocond" ):
                listener.exitTest_nocond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTest_nocond" ):
                return visitor.visitTest_nocond(self)
            else:
                return visitor.visitChildren(self)




    def test_nocond(self):

        localctx = Python3Parser.Test_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_test_nocond)
        try:
            self.state = 682
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_LITERAL, Python3Parser.BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 680
                self.or_test()
                pass
            elif token in [Python3Parser.LAMBDA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 681
                self.lambdef_nocond()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(Python3Parser.LAMBDA, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(Python3Parser.VarargslistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_lambdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdef" ):
                listener.enterLambdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdef" ):
                listener.exitLambdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdef" ):
                return visitor.visitLambdef(self)
            else:
                return visitor.visitChildren(self)




    def lambdef(self):

        localctx = Python3Parser.LambdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_lambdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 684
            self.match(Python3Parser.LAMBDA)
            self.state = 686
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.POWER))) != 0):
                self.state = 685
                self.varargslist()


            self.state = 688
            self.match(Python3Parser.COLON)
            self.state = 689
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Lambdef_nocondContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(Python3Parser.LAMBDA, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Test_nocondContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(Python3Parser.VarargslistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_lambdef_nocond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdef_nocond" ):
                listener.enterLambdef_nocond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdef_nocond" ):
                listener.exitLambdef_nocond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdef_nocond" ):
                return visitor.visitLambdef_nocond(self)
            else:
                return visitor.visitChildren(self)




    def lambdef_nocond(self):

        localctx = Python3Parser.Lambdef_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_lambdef_nocond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 691
            self.match(Python3Parser.LAMBDA)
            self.state = 693
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.NAME) | (1 << Python3Parser.STAR) | (1 << Python3Parser.POWER))) != 0):
                self.state = 692
                self.varargslist()


            self.state = 695
            self.match(Python3Parser.COLON)
            self.state = 696
            self.test_nocond()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Or_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.And_testContext)
            else:
                return self.getTypedRuleContext(Python3Parser.And_testContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.OR)
            else:
                return self.getToken(Python3Parser.OR, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_or_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_test" ):
                listener.enterOr_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_test" ):
                listener.exitOr_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr_test" ):
                return visitor.visitOr_test(self)
            else:
                return visitor.visitChildren(self)




    def or_test(self):

        localctx = Python3Parser.Or_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_or_test)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 698
            self.and_test()
            self.state = 703
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.OR:
                self.state = 699
                self.match(Python3Parser.OR)
                self.state = 700
                self.and_test()
                self.state = 705
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class And_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def not_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Not_testContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Not_testContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(Python3Parser.AND)
            else:
                return self.getToken(Python3Parser.AND, i)

        def getRuleIndex(self):
            return Python3Parser.RULE_and_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_test" ):
                listener.enterAnd_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_test" ):
                listener.exitAnd_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnd_test" ):
                return visitor.visitAnd_test(self)
            else:
                return visitor.visitChildren(self)




    def and_test(self):

        localctx = Python3Parser.And_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_and_test)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 706
            self.not_test()
            self.state = 711
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.AND:
                self.state = 707
                self.match(Python3Parser.AND)
                self.state = 708
                self.not_test()
                self.state = 713
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Not_testContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(Python3Parser.NOT, 0)

        def not_test(self):
            return self.getTypedRuleContext(Python3Parser.Not_testContext,0)


        def comparison(self):
            return self.getTypedRuleContext(Python3Parser.ComparisonContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_not_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot_test" ):
                listener.enterNot_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot_test" ):
                listener.exitNot_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNot_test" ):
                return visitor.visitNot_test(self)
            else:
                return visitor.visitChildren(self)




    def not_test(self):

        localctx = Python3Parser.Not_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_not_test)
        try:
            self.state = 717
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.NOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 714
                self.match(Python3Parser.NOT)
                self.state = 715
                self.not_test()
                pass
            elif token in [Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_LITERAL, Python3Parser.BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 716
                self.comparison()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComparisonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_exprContext,i)


        def comp_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Comp_opContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Comp_opContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)




    def comparison(self):

        localctx = Python3Parser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_comparison)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            self.star_expr()
            self.state = 725
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 15)) & ~0x3f) == 0 and ((1 << (_la - 15)) & ((1 << (Python3Parser.IN - 15)) | (1 << (Python3Parser.NOT - 15)) | (1 << (Python3Parser.IS - 15)) | (1 << (Python3Parser.LESS_THAN - 15)) | (1 << (Python3Parser.GREATER_THAN - 15)) | (1 << (Python3Parser.EQUALS - 15)) | (1 << (Python3Parser.GT_EQ - 15)) | (1 << (Python3Parser.LT_EQ - 15)) | (1 << (Python3Parser.NOT_EQ_1 - 15)) | (1 << (Python3Parser.NOT_EQ_2 - 15)))) != 0):
                self.state = 720
                self.comp_op()
                self.state = 721
                self.star_expr()
                self.state = 727
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def NOT(self):
            return self.getToken(Python3Parser.NOT, 0)

        def IS(self):
            return self.getToken(Python3Parser.IS, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_comp_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_op" ):
                listener.enterComp_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_op" ):
                listener.exitComp_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_op" ):
                return visitor.visitComp_op(self)
            else:
                return visitor.visitChildren(self)




    def comp_op(self):

        localctx = Python3Parser.Comp_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_comp_op)
        try:
            self.state = 741
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 728
                self.match(Python3Parser.LESS_THAN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 729
                self.match(Python3Parser.GREATER_THAN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 730
                self.match(Python3Parser.EQUALS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 731
                self.match(Python3Parser.GT_EQ)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 732
                self.match(Python3Parser.LT_EQ)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 733
                self.match(Python3Parser.NOT_EQ_1)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 734
                self.match(Python3Parser.NOT_EQ_2)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 735
                self.match(Python3Parser.IN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 736
                self.match(Python3Parser.NOT)
                self.state = 737
                self.match(Python3Parser.IN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 738
                self.match(Python3Parser.IS)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 739
                self.match(Python3Parser.IS)
                self.state = 740
                self.match(Python3Parser.NOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Star_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(Python3Parser.ExprContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_expr" ):
                listener.enterStar_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_expr" ):
                listener.exitStar_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_expr" ):
                return visitor.visitStar_expr(self)
            else:
                return visitor.visitChildren(self)




    def star_expr(self):

        localctx = Python3Parser.Star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_star_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 744
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.STAR:
                self.state = 743
                self.match(Python3Parser.STAR)


            self.state = 746
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xor_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Xor_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Xor_exprContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)




    def expr(self):

        localctx = Python3Parser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 748
            self.xor_expr()
            self.state = 753
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.OR_OP:
                self.state = 749
                self.match(Python3Parser.OR_OP)
                self.state = 750
                self.xor_expr()
                self.state = 755
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xor_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.And_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.And_exprContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_xor_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXor_expr" ):
                listener.enterXor_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXor_expr" ):
                listener.exitXor_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXor_expr" ):
                return visitor.visitXor_expr(self)
            else:
                return visitor.visitChildren(self)




    def xor_expr(self):

        localctx = Python3Parser.Xor_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_xor_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 756
            self.and_expr()
            self.state = 761
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.XOR:
                self.state = 757
                self.match(Python3Parser.XOR)
                self.state = 758
                self.and_expr()
                self.state = 763
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class And_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shift_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Shift_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Shift_exprContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_and_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_expr" ):
                listener.enterAnd_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_expr" ):
                listener.exitAnd_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnd_expr" ):
                return visitor.visitAnd_expr(self)
            else:
                return visitor.visitChildren(self)




    def and_expr(self):

        localctx = Python3Parser.And_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_and_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 764
            self.shift_expr()
            self.state = 769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.AND_OP:
                self.state = 765
                self.match(Python3Parser.AND_OP)
                self.state = 766
                self.shift_expr()
                self.state = 771
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Shift_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arith_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Arith_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Arith_exprContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_shift_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShift_expr" ):
                listener.enterShift_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShift_expr" ):
                listener.exitShift_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShift_expr" ):
                return visitor.visitShift_expr(self)
            else:
                return visitor.visitChildren(self)




    def shift_expr(self):

        localctx = Python3Parser.Shift_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_shift_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 772
            self.arith_expr()
            self.state = 779
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.LEFT_SHIFT or _la==Python3Parser.RIGHT_SHIFT:
                self.state = 777
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.LEFT_SHIFT]:
                    self.state = 773
                    self.match(Python3Parser.LEFT_SHIFT)
                    self.state = 774
                    self.arith_expr()
                    pass
                elif token in [Python3Parser.RIGHT_SHIFT]:
                    self.state = 775
                    self.match(Python3Parser.RIGHT_SHIFT)
                    self.state = 776
                    self.arith_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 781
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Arith_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TermContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TermContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_arith_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArith_expr" ):
                listener.enterArith_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArith_expr" ):
                listener.exitArith_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArith_expr" ):
                return visitor.visitArith_expr(self)
            else:
                return visitor.visitChildren(self)




    def arith_expr(self):

        localctx = Python3Parser.Arith_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_arith_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 782
            self.term()
            self.state = 789
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Python3Parser.ADD or _la==Python3Parser.MINUS:
                self.state = 787
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.ADD]:
                    self.state = 783
                    self.match(Python3Parser.ADD)
                    self.state = 784
                    self.term()
                    pass
                elif token in [Python3Parser.MINUS]:
                    self.state = 785
                    self.match(Python3Parser.MINUS)
                    self.state = 786
                    self.term()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 791
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.FactorContext)
            else:
                return self.getTypedRuleContext(Python3Parser.FactorContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTerm" ):
                return visitor.visitTerm(self)
            else:
                return visitor.visitChildren(self)




    def term(self):

        localctx = Python3Parser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            self.factor()
            self.state = 805
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 46)) & ~0x3f) == 0 and ((1 << (_la - 46)) & ((1 << (Python3Parser.STAR - 46)) | (1 << (Python3Parser.DIV - 46)) | (1 << (Python3Parser.MOD - 46)) | (1 << (Python3Parser.IDIV - 46)) | (1 << (Python3Parser.AT - 46)))) != 0):
                self.state = 803
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.STAR]:
                    self.state = 793
                    self.match(Python3Parser.STAR)
                    self.state = 794
                    self.factor()
                    pass
                elif token in [Python3Parser.DIV]:
                    self.state = 795
                    self.match(Python3Parser.DIV)
                    self.state = 796
                    self.factor()
                    pass
                elif token in [Python3Parser.MOD]:
                    self.state = 797
                    self.match(Python3Parser.MOD)
                    self.state = 798
                    self.factor()
                    pass
                elif token in [Python3Parser.IDIV]:
                    self.state = 799
                    self.match(Python3Parser.IDIV)
                    self.state = 800
                    self.factor()
                    pass
                elif token in [Python3Parser.AT]:
                    self.state = 801
                    self.match(Python3Parser.AT)
                    self.state = 802
                    self.factor()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 807
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FactorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(Python3Parser.FactorContext,0)


        def power(self):
            return self.getTypedRuleContext(Python3Parser.PowerContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFactor" ):
                return visitor.visitFactor(self)
            else:
                return visitor.visitChildren(self)




    def factor(self):

        localctx = Python3Parser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_factor)
        try:
            self.state = 815
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.ADD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 808
                self.match(Python3Parser.ADD)
                self.state = 809
                self.factor()
                pass
            elif token in [Python3Parser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 810
                self.match(Python3Parser.MINUS)
                self.state = 811
                self.factor()
                pass
            elif token in [Python3Parser.NOT_OP]:
                self.enterOuterAlt(localctx, 3)
                self.state = 812
                self.match(Python3Parser.NOT_OP)
                self.state = 813
                self.factor()
                pass
            elif token in [Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_LITERAL, Python3Parser.BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 814
                self.power()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PowerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(Python3Parser.AtomContext,0)


        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TrailerContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TrailerContext,i)


        def factor(self):
            return self.getTypedRuleContext(Python3Parser.FactorContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_power

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPower" ):
                listener.enterPower(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPower" ):
                listener.exitPower(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPower" ):
                return visitor.visitPower(self)
            else:
                return visitor.visitChildren(self)




    def power(self):

        localctx = Python3Parser.PowerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_power)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 817
            self.atom()
            self.state = 821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.DOT) | (1 << Python3Parser.OPEN_PAREN) | (1 << Python3Parser.OPEN_BRACK))) != 0):
                self.state = 818
                self.trailer()
                self.state = 823
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.POWER:
                self.state = 824
                self.match(Python3Parser.POWER)
                self.state = 825
                self.factor()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(Python3Parser.Yield_exprContext,0)


        def testlist_comp(self):
            return self.getTypedRuleContext(Python3Parser.Testlist_compContext,0)


        def dictorsetmaker(self):
            return self.getTypedRuleContext(Python3Parser.DictorsetmakerContext,0)


        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def number(self):
            return self.getTypedRuleContext(Python3Parser.NumberContext,0)


        def strr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.StrrContext)
            else:
                return self.getTypedRuleContext(Python3Parser.StrrContext,i)


        def NONE(self):
            return self.getToken(Python3Parser.NONE, 0)

        def TRUE(self):
            return self.getToken(Python3Parser.TRUE, 0)

        def FALSE(self):
            return self.getToken(Python3Parser.FALSE, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom" ):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = Python3Parser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_atom)
        self._la = 0 # Token type
        try:
            self.state = 855
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 828
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 831
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.YIELD]:
                    self.state = 829
                    self.yield_expr()
                    pass
                elif token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_LITERAL, Python3Parser.BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                    self.state = 830
                    self.testlist_comp()
                    pass
                elif token in [Python3Parser.CLOSE_PAREN]:
                    pass
                else:
                    pass
                self.state = 833
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token in [Python3Parser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 834
                self.match(Python3Parser.OPEN_BRACK)
                self.state = 836
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (1 << (Python3Parser.STRING_LITERAL - 20)) | (1 << (Python3Parser.BYTES_LITERAL - 20)) | (1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 835
                    self.testlist_comp()


                self.state = 838
                self.match(Python3Parser.CLOSE_BRACK)
                pass
            elif token in [Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 839
                self.match(Python3Parser.OPEN_BRACE)
                self.state = 841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (1 << (Python3Parser.STRING_LITERAL - 20)) | (1 << (Python3Parser.BYTES_LITERAL - 20)) | (1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 840
                    self.dictorsetmaker()


                self.state = 843
                self.match(Python3Parser.CLOSE_BRACE)
                pass
            elif token in [Python3Parser.NAME]:
                self.enterOuterAlt(localctx, 4)
                self.state = 844
                self.match(Python3Parser.NAME)
                pass
            elif token in [Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER]:
                self.enterOuterAlt(localctx, 5)
                self.state = 845
                self.number()
                pass
            elif token in [Python3Parser.STRING_LITERAL, Python3Parser.BYTES_LITERAL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 847 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 846
                    self.strr()
                    self.state = 849 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==Python3Parser.STRING_LITERAL or _la==Python3Parser.BYTES_LITERAL):
                        break

                pass
            elif token in [Python3Parser.ELLIPSIS]:
                self.enterOuterAlt(localctx, 7)
                self.state = 851
                self.match(Python3Parser.ELLIPSIS)
                pass
            elif token in [Python3Parser.NONE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 852
                self.match(Python3Parser.NONE)
                pass
            elif token in [Python3Parser.TRUE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 853
                self.match(Python3Parser.TRUE)
                pass
            elif token in [Python3Parser.FALSE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 854
                self.match(Python3Parser.FALSE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Testlist_compContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_testlist_comp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_comp" ):
                listener.enterTestlist_comp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_comp" ):
                listener.exitTestlist_comp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_comp" ):
                return visitor.visitTestlist_comp(self)
            else:
                return visitor.visitChildren(self)




    def testlist_comp(self):

        localctx = Python3Parser.Testlist_compContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_testlist_comp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            self.test()
            self.state = 869
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.FOR]:
                self.state = 858
                self.comp_for()
                pass
            elif token in [Python3Parser.CLOSE_PAREN, Python3Parser.COMMA, Python3Parser.CLOSE_BRACK]:
                self.state = 863
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,112,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 859
                        self.match(Python3Parser.COMMA)
                        self.state = 860
                        self.test() 
                    self.state = 865
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

                self.state = 867
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 866
                    self.match(Python3Parser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TrailerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext,0)


        def subscriptlist(self):
            return self.getTypedRuleContext(Python3Parser.SubscriptlistContext,0)


        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_trailer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailer" ):
                listener.enterTrailer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailer" ):
                listener.exitTrailer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailer" ):
                return visitor.visitTrailer(self)
            else:
                return visitor.visitChildren(self)




    def trailer(self):

        localctx = Python3Parser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_trailer)
        self._la = 0 # Token type
        try:
            self.state = 882
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.OPEN_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 871
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 873
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (1 << (Python3Parser.STRING_LITERAL - 20)) | (1 << (Python3Parser.BYTES_LITERAL - 20)) | (1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.POWER - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 872
                    self.arglist()


                self.state = 875
                self.match(Python3Parser.CLOSE_PAREN)
                pass
            elif token in [Python3Parser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 876
                self.match(Python3Parser.OPEN_BRACK)
                self.state = 877
                self.subscriptlist()
                self.state = 878
                self.match(Python3Parser.CLOSE_BRACK)
                pass
            elif token in [Python3Parser.DOT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 880
                self.match(Python3Parser.DOT)
                self.state = 881
                self.match(Python3Parser.NAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubscriptlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.SubscriptContext)
            else:
                return self.getTypedRuleContext(Python3Parser.SubscriptContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_subscriptlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscriptlist" ):
                listener.enterSubscriptlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscriptlist" ):
                listener.exitSubscriptlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscriptlist" ):
                return visitor.visitSubscriptlist(self)
            else:
                return visitor.visitChildren(self)




    def subscriptlist(self):

        localctx = Python3Parser.SubscriptlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_subscriptlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 884
            self.subscript()
            self.state = 889
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,117,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 885
                    self.match(Python3Parser.COMMA)
                    self.state = 886
                    self.subscript() 
                self.state = 891
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,117,self._ctx)

            self.state = 893
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 892
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubscriptContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def sliceop(self):
            return self.getTypedRuleContext(Python3Parser.SliceopContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_subscript

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript" ):
                return visitor.visitSubscript(self)
            else:
                return visitor.visitChildren(self)




    def subscript(self):

        localctx = Python3Parser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_subscript)
        self._la = 0 # Token type
        try:
            self.state = 906
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 895
                self.test()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 897
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (1 << (Python3Parser.STRING_LITERAL - 20)) | (1 << (Python3Parser.BYTES_LITERAL - 20)) | (1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 896
                    self.test()


                self.state = 899
                self.match(Python3Parser.COLON)
                self.state = 901
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (1 << (Python3Parser.STRING_LITERAL - 20)) | (1 << (Python3Parser.BYTES_LITERAL - 20)) | (1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 900
                    self.test()


                self.state = 904
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COLON:
                    self.state = 903
                    self.sliceop()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SliceopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_sliceop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceop" ):
                listener.enterSliceop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceop" ):
                listener.exitSliceop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSliceop" ):
                return visitor.visitSliceop(self)
            else:
                return visitor.visitChildren(self)




    def sliceop(self):

        localctx = Python3Parser.SliceopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_sliceop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 908
            self.match(Python3Parser.COLON)
            self.state = 910
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (1 << (Python3Parser.STRING_LITERAL - 20)) | (1 << (Python3Parser.BYTES_LITERAL - 20)) | (1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                self.state = 909
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.Star_exprContext)
            else:
                return self.getTypedRuleContext(Python3Parser.Star_exprContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_exprlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprlist" ):
                listener.enterExprlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprlist" ):
                listener.exitExprlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprlist" ):
                return visitor.visitExprlist(self)
            else:
                return visitor.visitChildren(self)




    def exprlist(self):

        localctx = Python3Parser.ExprlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_exprlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 912
            self.star_expr()
            self.state = 917
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,124,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 913
                    self.match(Python3Parser.COMMA)
                    self.state = 914
                    self.star_expr() 
                self.state = 919
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,124,self._ctx)

            self.state = 921
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 920
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_testlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist" ):
                listener.enterTestlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist" ):
                listener.exitTestlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist" ):
                return visitor.visitTestlist(self)
            else:
                return visitor.visitChildren(self)




    def testlist(self):

        localctx = Python3Parser.TestlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_testlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 923
            self.test()
            self.state = 928
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,126,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 924
                    self.match(Python3Parser.COMMA)
                    self.state = 925
                    self.test() 
                self.state = 930
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,126,self._ctx)

            self.state = 932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.COMMA:
                self.state = 931
                self.match(Python3Parser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DictorsetmakerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_dictorsetmaker

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictorsetmaker" ):
                listener.enterDictorsetmaker(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictorsetmaker" ):
                listener.exitDictorsetmaker(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictorsetmaker" ):
                return visitor.visitDictorsetmaker(self)
            else:
                return visitor.visitChildren(self)




    def dictorsetmaker(self):

        localctx = Python3Parser.DictorsetmakerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_dictorsetmaker)
        self._la = 0 # Token type
        try:
            self.state = 967
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 934
                self.test()
                self.state = 935
                self.match(Python3Parser.COLON)
                self.state = 936
                self.test()
                self.state = 951
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.FOR]:
                    self.state = 937
                    self.comp_for()
                    pass
                elif token in [Python3Parser.COMMA, Python3Parser.CLOSE_BRACE]:
                    self.state = 945
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 938
                            self.match(Python3Parser.COMMA)
                            self.state = 939
                            self.test()
                            self.state = 940
                            self.match(Python3Parser.COLON)
                            self.state = 941
                            self.test() 
                        self.state = 947
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

                    self.state = 949
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Python3Parser.COMMA:
                        self.state = 948
                        self.match(Python3Parser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 953
                self.test()
                self.state = 965
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Python3Parser.FOR]:
                    self.state = 954
                    self.comp_for()
                    pass
                elif token in [Python3Parser.COMMA, Python3Parser.CLOSE_BRACE]:
                    self.state = 959
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,131,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 955
                            self.match(Python3Parser.COMMA)
                            self.state = 956
                            self.test() 
                        self.state = 961
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,131,self._ctx)

                    self.state = 963
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Python3Parser.COMMA:
                        self.state = 962
                        self.match(Python3Parser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassdefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(Python3Parser.CLASS, 0)

        def NAME(self):
            return self.getToken(Python3Parser.NAME, 0)

        def suite(self):
            return self.getTypedRuleContext(Python3Parser.SuiteContext,0)


        def arglist(self):
            return self.getTypedRuleContext(Python3Parser.ArglistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_classdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassdef" ):
                listener.enterClassdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassdef" ):
                listener.exitClassdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassdef" ):
                return visitor.visitClassdef(self)
            else:
                return visitor.visitChildren(self)




    def classdef(self):

        localctx = Python3Parser.ClassdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_classdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 969
            self.match(Python3Parser.CLASS)
            self.state = 970
            self.match(Python3Parser.NAME)
            self.state = 976
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.OPEN_PAREN:
                self.state = 971
                self.match(Python3Parser.OPEN_PAREN)
                self.state = 973
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (Python3Parser.LAMBDA - 20)) | (1 << (Python3Parser.NOT - 20)) | (1 << (Python3Parser.NONE - 20)) | (1 << (Python3Parser.TRUE - 20)) | (1 << (Python3Parser.FALSE - 20)) | (1 << (Python3Parser.NAME - 20)) | (1 << (Python3Parser.STRING_LITERAL - 20)) | (1 << (Python3Parser.BYTES_LITERAL - 20)) | (1 << (Python3Parser.DECIMAL_INTEGER - 20)) | (1 << (Python3Parser.OCT_INTEGER - 20)) | (1 << (Python3Parser.HEX_INTEGER - 20)) | (1 << (Python3Parser.BIN_INTEGER - 20)) | (1 << (Python3Parser.FLOAT_NUMBER - 20)) | (1 << (Python3Parser.IMAG_NUMBER - 20)) | (1 << (Python3Parser.ELLIPSIS - 20)) | (1 << (Python3Parser.STAR - 20)) | (1 << (Python3Parser.OPEN_PAREN - 20)) | (1 << (Python3Parser.POWER - 20)) | (1 << (Python3Parser.OPEN_BRACK - 20)) | (1 << (Python3Parser.ADD - 20)) | (1 << (Python3Parser.MINUS - 20)) | (1 << (Python3Parser.NOT_OP - 20)) | (1 << (Python3Parser.OPEN_BRACE - 20)))) != 0):
                    self.state = 972
                    self.arglist()


                self.state = 975
                self.match(Python3Parser.CLOSE_PAREN)


            self.state = 978
            self.match(Python3Parser.COLON)
            self.state = 979
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArglistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.ArgumentContext)
            else:
                return self.getTypedRuleContext(Python3Parser.ArgumentContext,i)


        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def getRuleIndex(self):
            return Python3Parser.RULE_arglist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArglist" ):
                listener.enterArglist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArglist" ):
                listener.exitArglist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArglist" ):
                return visitor.visitArglist(self)
            else:
                return visitor.visitChildren(self)




    def arglist(self):

        localctx = Python3Parser.ArglistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_arglist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 986
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,137,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 981
                    self.argument()
                    self.state = 982
                    self.match(Python3Parser.COMMA) 
                self.state = 988
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

            self.state = 1009
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.state = 989
                self.argument()
                self.state = 991
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 990
                    self.match(Python3Parser.COMMA)


                pass

            elif la_ == 2:
                self.state = 993
                self.match(Python3Parser.STAR)
                self.state = 994
                self.test()
                self.state = 999
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,139,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 995
                        self.match(Python3Parser.COMMA)
                        self.state = 996
                        self.argument() 
                    self.state = 1001
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,139,self._ctx)

                self.state = 1005
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.COMMA:
                    self.state = 1002
                    self.match(Python3Parser.COMMA)
                    self.state = 1003
                    self.match(Python3Parser.POWER)
                    self.state = 1004
                    self.test()


                pass

            elif la_ == 3:
                self.state = 1007
                self.match(Python3Parser.POWER)
                self.state = 1008
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Python3Parser.TestContext)
            else:
                return self.getTypedRuleContext(Python3Parser.TestContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument" ):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)




    def argument(self):

        localctx = Python3Parser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.state = 1019
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1011
                self.test()
                self.state = 1013
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Python3Parser.FOR:
                    self.state = 1012
                    self.comp_for()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1015
                self.test()
                self.state = 1016
                self.match(Python3Parser.ASSIGN)
                self.state = 1017
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_iterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_for(self):
            return self.getTypedRuleContext(Python3Parser.Comp_forContext,0)


        def comp_if(self):
            return self.getTypedRuleContext(Python3Parser.Comp_ifContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_comp_iter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_iter" ):
                listener.enterComp_iter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_iter" ):
                listener.exitComp_iter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_iter" ):
                return visitor.visitComp_iter(self)
            else:
                return visitor.visitChildren(self)




    def comp_iter(self):

        localctx = Python3Parser.Comp_iterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_comp_iter)
        try:
            self.state = 1023
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1021
                self.comp_for()
                pass
            elif token in [Python3Parser.IF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1022
                self.comp_if()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_forContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Python3Parser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(Python3Parser.ExprlistContext,0)


        def IN(self):
            return self.getToken(Python3Parser.IN, 0)

        def or_test(self):
            return self.getTypedRuleContext(Python3Parser.Or_testContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(Python3Parser.Comp_iterContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_comp_for

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_for" ):
                listener.enterComp_for(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_for" ):
                listener.exitComp_for(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_for" ):
                return visitor.visitComp_for(self)
            else:
                return visitor.visitChildren(self)




    def comp_for(self):

        localctx = Python3Parser.Comp_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_comp_for)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1025
            self.match(Python3Parser.FOR)
            self.state = 1026
            self.exprlist()
            self.state = 1027
            self.match(Python3Parser.IN)
            self.state = 1028
            self.or_test()
            self.state = 1030
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.IF or _la==Python3Parser.FOR:
                self.state = 1029
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comp_ifContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Python3Parser.IF, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(Python3Parser.Test_nocondContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(Python3Parser.Comp_iterContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_comp_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_if" ):
                listener.enterComp_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_if" ):
                listener.exitComp_if(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_if" ):
                return visitor.visitComp_if(self)
            else:
                return visitor.visitChildren(self)




    def comp_if(self):

        localctx = Python3Parser.Comp_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_comp_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1032
            self.match(Python3Parser.IF)
            self.state = 1033
            self.test_nocond()
            self.state = 1035
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Python3Parser.IF or _la==Python3Parser.FOR:
                self.state = 1034
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(Python3Parser.YIELD, 0)

        def yield_arg(self):
            return self.getTypedRuleContext(Python3Parser.Yield_argContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_yield_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_expr" ):
                listener.enterYield_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_expr" ):
                listener.exitYield_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_expr" ):
                return visitor.visitYield_expr(self)
            else:
                return visitor.visitChildren(self)




    def yield_expr(self):

        localctx = Python3Parser.Yield_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_yield_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1037
            self.match(Python3Parser.YIELD)
            self.state = 1039
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & ((1 << (Python3Parser.FROM - 4)) | (1 << (Python3Parser.LAMBDA - 4)) | (1 << (Python3Parser.NOT - 4)) | (1 << (Python3Parser.NONE - 4)) | (1 << (Python3Parser.TRUE - 4)) | (1 << (Python3Parser.FALSE - 4)) | (1 << (Python3Parser.NAME - 4)) | (1 << (Python3Parser.STRING_LITERAL - 4)) | (1 << (Python3Parser.BYTES_LITERAL - 4)) | (1 << (Python3Parser.DECIMAL_INTEGER - 4)) | (1 << (Python3Parser.OCT_INTEGER - 4)) | (1 << (Python3Parser.HEX_INTEGER - 4)) | (1 << (Python3Parser.BIN_INTEGER - 4)) | (1 << (Python3Parser.FLOAT_NUMBER - 4)) | (1 << (Python3Parser.IMAG_NUMBER - 4)) | (1 << (Python3Parser.ELLIPSIS - 4)) | (1 << (Python3Parser.STAR - 4)) | (1 << (Python3Parser.OPEN_PAREN - 4)) | (1 << (Python3Parser.OPEN_BRACK - 4)) | (1 << (Python3Parser.ADD - 4)) | (1 << (Python3Parser.MINUS - 4)) | (1 << (Python3Parser.NOT_OP - 4)) | (1 << (Python3Parser.OPEN_BRACE - 4)))) != 0):
                self.state = 1038
                self.yield_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Yield_argContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(Python3Parser.FROM, 0)

        def test(self):
            return self.getTypedRuleContext(Python3Parser.TestContext,0)


        def testlist(self):
            return self.getTypedRuleContext(Python3Parser.TestlistContext,0)


        def getRuleIndex(self):
            return Python3Parser.RULE_yield_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_arg" ):
                listener.enterYield_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_arg" ):
                listener.exitYield_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_arg" ):
                return visitor.visitYield_arg(self)
            else:
                return visitor.visitChildren(self)




    def yield_arg(self):

        localctx = Python3Parser.Yield_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_yield_arg)
        try:
            self.state = 1044
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.FROM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1041
                self.match(Python3Parser.FROM)
                self.state = 1042
                self.test()
                pass
            elif token in [Python3Parser.LAMBDA, Python3Parser.NOT, Python3Parser.NONE, Python3Parser.TRUE, Python3Parser.FALSE, Python3Parser.NAME, Python3Parser.STRING_LITERAL, Python3Parser.BYTES_LITERAL, Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER, Python3Parser.FLOAT_NUMBER, Python3Parser.IMAG_NUMBER, Python3Parser.ELLIPSIS, Python3Parser.STAR, Python3Parser.OPEN_PAREN, Python3Parser.OPEN_BRACK, Python3Parser.ADD, Python3Parser.MINUS, Python3Parser.NOT_OP, Python3Parser.OPEN_BRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1043
                self.testlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StrrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(Python3Parser.STRING_LITERAL, 0)

        def BYTES_LITERAL(self):
            return self.getToken(Python3Parser.BYTES_LITERAL, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_strr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStrr" ):
                listener.enterStrr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStrr" ):
                listener.exitStrr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrr" ):
                return visitor.visitStrr(self)
            else:
                return visitor.visitChildren(self)




    def strr(self):

        localctx = Python3Parser.StrrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_strr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1046
            _la = self._input.LA(1)
            if not(_la==Python3Parser.STRING_LITERAL or _la==Python3Parser.BYTES_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer(self):
            return self.getTypedRuleContext(Python3Parser.IntegerContext,0)


        def FLOAT_NUMBER(self):
            return self.getToken(Python3Parser.FLOAT_NUMBER, 0)

        def IMAG_NUMBER(self):
            return self.getToken(Python3Parser.IMAG_NUMBER, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumber" ):
                return visitor.visitNumber(self)
            else:
                return visitor.visitChildren(self)




    def number(self):

        localctx = Python3Parser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_number)
        try:
            self.state = 1051
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Python3Parser.DECIMAL_INTEGER, Python3Parser.OCT_INTEGER, Python3Parser.HEX_INTEGER, Python3Parser.BIN_INTEGER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1048
                self.integer()
                pass
            elif token in [Python3Parser.FLOAT_NUMBER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1049
                self.match(Python3Parser.FLOAT_NUMBER)
                pass
            elif token in [Python3Parser.IMAG_NUMBER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1050
                self.match(Python3Parser.IMAG_NUMBER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntegerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_INTEGER(self):
            return self.getToken(Python3Parser.DECIMAL_INTEGER, 0)

        def OCT_INTEGER(self):
            return self.getToken(Python3Parser.OCT_INTEGER, 0)

        def HEX_INTEGER(self):
            return self.getToken(Python3Parser.HEX_INTEGER, 0)

        def BIN_INTEGER(self):
            return self.getToken(Python3Parser.BIN_INTEGER, 0)

        def getRuleIndex(self):
            return Python3Parser.RULE_integer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger" ):
                listener.enterInteger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger" ):
                listener.exitInteger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteger" ):
                return visitor.visitInteger(self)
            else:
                return visitor.visitChildren(self)




    def integer(self):

        localctx = Python3Parser.IntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_integer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1053
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Python3Parser.DECIMAL_INTEGER) | (1 << Python3Parser.OCT_INTEGER) | (1 << Python3Parser.HEX_INTEGER) | (1 << Python3Parser.BIN_INTEGER))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





